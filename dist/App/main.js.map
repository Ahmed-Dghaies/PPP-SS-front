{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Components/Authentification/login/login.component.css","webpack:///./src/app/Components/Authentification/login/login.component.html","webpack:///./src/app/Components/Authentification/login/login.component.ts","webpack:///./src/app/Components/Authentification/register/register.component.css","webpack:///./src/app/Components/Authentification/register/register.component.html","webpack:///./src/app/Components/Authentification/register/register.component.ts","webpack:///./src/app/Components/Shared/confirm-delete/confirm-delete.component.css","webpack:///./src/app/Components/Shared/confirm-delete/confirm-delete.component.html","webpack:///./src/app/Components/Shared/confirm-delete/confirm-delete.component.ts","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-add/releveIndex-add.component.css","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-add/releveIndex-add.component.html","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-add/releveIndex-add.component.ts","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-edit/releveIndex-edit.component.css","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-edit/releveIndex-edit.component.html","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-edit/releveIndex-edit.component.ts","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-list.component.css","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-list.component.html","webpack:///./src/app/Components/home/Recette/releveIndex-list/releveIndex-list.component.ts","webpack:///./src/app/Components/home/home.component.css","webpack:///./src/app/Components/home/home.component.html","webpack:///./src/app/Components/home/home.component.ts","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-add/card-type-add.component.css","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-add/card-type-add.component.html","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-add/card-type-add.component.ts","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-edit/card-type-edit.component.css","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-edit/card-type-edit.component.html","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-edit/card-type-edit.component.ts","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-list.component.css","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-list.component.html","webpack:///./src/app/Components/parameters/Carte Bon/card-type-list/card-type-list.component.ts","webpack:///./src/app/Components/parameters/citerne/citerne-list/add-citerne/add-citerne.component.css","webpack:///./src/app/Components/parameters/citerne/citerne-list/add-citerne/add-citerne.component.html","webpack:///./src/app/Components/parameters/citerne/citerne-list/add-citerne/add-citerne.component.ts","webpack:///./src/app/Components/parameters/citerne/citerne-list/citerne-list.component.css","webpack:///./src/app/Components/parameters/citerne/citerne-list/citerne-list.component.html","webpack:///./src/app/Components/parameters/citerne/citerne-list/citerne-list.component.ts","webpack:///./src/app/Components/parameters/citerne/citerne-list/update-citerne/update-citerne.component.css","webpack:///./src/app/Components/parameters/citerne/citerne-list/update-citerne/update-citerne.component.html","webpack:///./src/app/Components/parameters/citerne/citerne-list/update-citerne/update-citerne.component.ts","webpack:///./src/app/Components/parameters/client/client-list/add-client/add-client.component.css","webpack:///./src/app/Components/parameters/client/client-list/add-client/add-client.component.html","webpack:///./src/app/Components/parameters/client/client-list/add-client/add-client.component.ts","webpack:///./src/app/Components/parameters/client/client-list/client-list.component.css","webpack:///./src/app/Components/parameters/client/client-list/client-list.component.html","webpack:///./src/app/Components/parameters/client/client-list/client-list.component.ts","webpack:///./src/app/Components/parameters/client/client-list/more-details/more-details.component.css","webpack:///./src/app/Components/parameters/client/client-list/more-details/more-details.component.html","webpack:///./src/app/Components/parameters/client/client-list/more-details/more-details.component.ts","webpack:///./src/app/Components/parameters/client/client-list/update-client/update-client.component.css","webpack:///./src/app/Components/parameters/client/client-list/update-client/update-client.component.html","webpack:///./src/app/Components/parameters/client/client-list/update-client/update-client.component.ts","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-add/distributeur-add.component.css","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-add/distributeur-add.component.html","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-add/distributeur-add.component.ts","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-edit/distributeur-edit.component.css","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-edit/distributeur-edit.component.html","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-edit/distributeur-edit.component.ts","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-list.component.css","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-list.component.html","webpack:///./src/app/Components/parameters/distributeur/distributeur-list/distributeur-list.component.ts","webpack:///./src/app/Components/parameters/index/index-list/index-add/index-add.component.css","webpack:///./src/app/Components/parameters/index/index-list/index-add/index-add.component.html","webpack:///./src/app/Components/parameters/index/index-list/index-add/index-add.component.ts","webpack:///./src/app/Components/parameters/index/index-list/index-edit/index-edit.component.css","webpack:///./src/app/Components/parameters/index/index-list/index-edit/index-edit.component.html","webpack:///./src/app/Components/parameters/index/index-list/index-edit/index-edit.component.ts","webpack:///./src/app/Components/parameters/index/index-list/index-list.component.css","webpack:///./src/app/Components/parameters/index/index-list/index-list.component.html","webpack:///./src/app/Components/parameters/index/index-list/index-list.component.ts","webpack:///./src/app/Components/parameters/parameters.component.css","webpack:///./src/app/Components/parameters/parameters.component.html","webpack:///./src/app/Components/parameters/parameters.component.ts","webpack:///./src/app/Components/parameters/prixCarburant/prix-Carburant-list/prix-carburant-add/prix-carburant-add.component.css","webpack:///./src/app/Components/parameters/prixCarburant/prix-Carburant-list/prix-carburant-add/prix-carburant-add.component.html","webpack:///./src/app/Components/parameters/prixCarburant/prix-Carburant-list/prix-carburant-add/prix-carburant-add.component.ts","webpack:///./src/app/Components/parameters/prixCarburant/prix-Carburant-list/prix-carburant-list.component.css","webpack:///./src/app/Components/parameters/prixCarburant/prix-Carburant-list/prix-carburant-list.component.html","webpack:///./src/app/Components/parameters/prixCarburant/prix-Carburant-list/prix-carburant-list.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/material/material.module.ts","webpack:///./src/app/shared/Guards/auth.guard.ts","webpack:///./src/app/shared/models/Index.model.ts","webpack:///./src/app/shared/models/ReleveIndex.model.ts","webpack:///./src/app/shared/models/carburant.ts","webpack:///./src/app/shared/models/cardType.model.ts","webpack:///./src/app/shared/models/citerne.model.ts","webpack:///./src/app/shared/models/client.model.ts","webpack:///./src/app/shared/models/distributeur.model.ts","webpack:///./src/app/shared/services/auth.service.ts","webpack:///./src/app/shared/services/carte-bon-type.service.ts","webpack:///./src/app/shared/services/citerne.service.ts","webpack:///./src/app/shared/services/client.service.ts","webpack:///./src/app/shared/services/distributeur.service.ts","webpack:///./src/app/shared/services/index.service.ts","webpack:///./src/app/shared/services/notification.service.ts","webpack:///./src/app/shared/services/prix-carburant.service.ts","webpack:///./src/app/shared/services/releveIndex.service.ts","webpack:///./src/app/shared/services/session.service.ts","webpack:///./src/app/shared/services/token-interceptor.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvQXV0aGVudGlmaWNhdGlvbi9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"py-5\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 mx-auto\\\">\\n      <span class=\\\"anchor\\\" id=\\\"formLogin\\\"></span>\\n\\n      <!-- form card login -->\\n      <div class=\\\"card rounded-0\\\">\\n        <div class=\\\"card-header\\\">\\n          <h3 class=\\\"mb-0\\\">Login</h3>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <form class=\\\"form\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"uname1\\\">Username</label>\\n              <input type=\\\"text\\\" [(ngModel)]=\\\"loginUserData.email\\\" name=\\\"email\\\" class=\\\"form-control rounded-0\\\" required>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label>Password</label>\\n              <input type=\\\"password\\\" [(ngModel)]=\\\"loginUserData.password\\\" name=\\\"password\\\" class=\\\"form-control rounded-0\\\"  required>\\n            </div>\\n            <button type=\\\"button\\\" (click)=\\\"loginUser()\\\" class=\\\"btn btn-success float-right\\\">Login</button>\\n          </form>\\n        </div>\\n        <!--/card-block-->\\n      </div>\\n      <!-- /form card login -->\\n\\n    </div>\\n\\n\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../shared/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginUserData = { email: '', password: '' };\n  constructor(\n    private auth: AuthService,\n    private route: Router) { }\n\n  ngOnInit() {\n    if (this.auth.loggedIn()) {\n      this.route.navigate(['/home']);\n    }\n  }\n\n  loginUser() {\n    this.auth.loginUser(this.loginUserData)\n      .subscribe(\n        res => {\n          console.log(res);\n          localStorage.setItem('token', res.token);\n          this.route.navigate(['/home']);\n        },\n        err => console.log(err)\n      );\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvQXV0aGVudGlmaWNhdGlvbi9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"py-5\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 mx-auto\\\">\\n      <span class=\\\"anchor\\\" id=\\\"formLogin\\\"></span>\\n\\n      <!-- form card login -->\\n      <div class=\\\"card rounded-0\\\">\\n        <div class=\\\"card-header\\\">\\n          <h3 class=\\\"mb-0\\\">Register</h3>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <form class=\\\"form\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"uname1\\\">Username</label>\\n              <input type=\\\"text\\\" [(ngModel)]=\\\"registerUserData.email\\\" name=\\\"email\\\" class=\\\"form-control rounded-0\\\" required>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label>Password</label>\\n              <input type=\\\"password\\\" [(ngModel)]=\\\"registerUserData.password\\\" name=\\\"password\\\" class=\\\"form-control rounded-0\\\"  required>\\n            </div>\\n            <button type=\\\"button\\\" (click)=\\\"registerUser()\\\" class=\\\"btn btn-primary float-right\\\">Register</button>\\n          </form>\\n        </div>\\n        <!--/card-block-->\\n      </div>\\n      <!-- /form card login -->\\n\\n    </div>\\n\\n\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../shared/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerUserData = { email: '', password: ''};\n  constructor(private auth: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  registerUser() {\n    this.auth.registerUser(this.registerUserData)\n    .subscribe(\n      res => {\n        console.log(res);\n        localStorage.setItem('token', res.token);\n        this.router.navigate(['/home']);\n      },\n      err => console.log(err)\n    );\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvU2hhcmVkL2NvbmZpcm0tZGVsZXRlL2NvbmZpcm0tZGVsZXRlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div mat-dialog-content>\\r\\n  <p>Voulez-vous vraiment supprimer ce {{msg}}</p>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n  <button mat-button (click)=\\\"annuler()\\\">Annuler</button>\\r\\n  <button mat-raised-button color=\\\"primary\\\" cdkFocusInitial (click)=\\\"delete()\\\">Ok</button>\\r\\n</div>\\r\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ClientService } from 'app/shared/services/client.service';\r\nimport { NotificationService } from 'app/shared/services/notification.service';\r\nimport { CarteBonTypeService } from 'app/shared/services/carte-bon-type.service';\r\nimport { ReleveIndexService } from 'app/shared/services/releveIndex.service';\r\nimport { IndexService } from 'app/shared/services/index.service';\r\nimport { CiterneService } from 'app/shared/services/citerne.service';\r\n\r\n@Component({\r\n  selector: 'app-confirm-delete',\r\n  templateUrl: './confirm-delete.component.html',\r\n  styleUrls: ['./confirm-delete.component.css']\r\n})\r\nexport class ConfirmDeleteComponent implements OnInit {\r\n\r\n  public id: string;\r\n  public msg: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmDeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private clientService: ClientService,\r\n    private cardTypeService: CarteBonTypeService,\r\n    private releveIndexService: ReleveIndexService,\r\n    private indexService: IndexService,\r\n    private citerneService: CiterneService,\r\n    private notifService: NotificationService) {\r\n    this.id = data.id;\r\n    this.msg = data.msg;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  delete() {\r\n    if (this.msg === 'client') {\r\n      this.deleteClient();\r\n    } else if (this.msg === 'type carte bon') {\r\n      this.deleteCardType();\r\n    } else if (this.msg === 'relevé index') {\r\n      this.deleteReleveIndex();\r\n    } else if (this.msg === 'index') {\r\n      this.deleteIndex();\r\n    } else if (this.msg === 'citerne') {\r\n      this.deleteCiterne();\r\n    }\r\n  }\r\n\r\n  annuler(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  deleteCiterne(): void {\r\n    this.citerneService.deleteCiterne(this.id).subscribe(res => {\r\n      this.citerneService.getCiternesList();\r\n      this.dialogRef.close();\r\n      this.notifService.success(`${this.msg} supprimé avec succés`);\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteReleveIndex(): void {\r\n    this.releveIndexService.deleteReleveIndex(this.id).subscribe(res => {\r\n      this.releveIndexService.getReleveIndexsList();\r\n      this.dialogRef.close();\r\n      this.notifService.success(`${this.msg} supprimé avec succés`);\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteIndex(): void {\r\n    this.indexService.deleteIndex(this.id).subscribe(res => {\r\n      this.indexService.getIndexList();\r\n      this.dialogRef.close();\r\n      this.notifService.success(`${this.msg} supprimé avec succés`);\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteClient(): void {\r\n    this.clientService.deleteClient(this.id).subscribe(res => {\r\n      this.clientService.getClientsList();\r\n      this.dialogRef.close();\r\n      this.notifService.success(`${this.msg} supprimé avec succés`);\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteCardType(): void {\r\n    this.cardTypeService.deleteCardType(this.id).subscribe(res => {\r\n      this.cardTypeService.getCardTypesList();\r\n      this.dialogRef.close();\r\n      this.notifService.success(`${this.msg} supprimé avec succés`);\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvaG9tZS9SZWNldHRlL3JlbGV2ZUluZGV4LWxpc3QvcmVsZXZlSW5kZXgtYWRkL3JlbGV2ZUluZGV4LWFkZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-toolbar>\\n  <span>Ajouter relevé index</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n    <mat-icon>clear</mat-icon>\\n  </button>\\n</mat-toolbar>\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\" (submit)=\\\"addReleveIndex()\\\">\\n  <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"300px\\\">\\n    <mat-grid-tile>\\n      <div class=\\\"controles-container\\\">\\n        <mat-form-field>\\n          <mat-label>Reference</mat-label>\\n          <mat-select required name=\\\"reference\\\" [(ngModel)]=\\\"releveIndex.reference\\\">\\n            <mat-option>None</mat-option>\\n            <mat-option *ngFor=\\\"let name of releveIndexService.list\\\"  [value]=\\\"name\\\" >{{name}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>Reference index is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Départ index\\\" required type=\\\"number\\\" name=\\\"depart\\\"\\n            [(ngModel)]=\\\"releveIndex.depart\\\">\\n          <mat-error>Départ index is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Arrivé index\\\" required type=\\\"number\\\" name=\\\"arrive\\\"\\n            [(ngModel)]=\\\"releveIndex.arrive\\\">\\n          <mat-error>Arrivé index is required.</mat-error>\\n        </mat-form-field>\\n        <div class=\\\"button-row\\\">\\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\"\\n            [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Ajouter Relevé index</button>\\n          <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n        </div>\\n      </div>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</form>\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ReleveIndex } from 'app/shared/models/ReleveIndex.model';\nimport { MatDialogRef, MatSort, MatPaginator } from '@angular/material';\nimport { ReleveIndexService } from 'app/shared/services/releveIndex.service';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { NgForm } from '@angular/forms';\nimport { IndexService } from 'app/shared/services/index.service';\n\n@Component({\n  selector: 'app-releve-index-add',\n  templateUrl: './releveIndex-add.component.html',\n  styleUrls: ['./releveIndex-add.component.css']\n})\nexport class ReleveIndexAddComponent implements OnInit {\n\n  public releveIndex: ReleveIndex;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    private dialogRef: MatDialogRef<ReleveIndexAddComponent>,\n    private releveIndexService: ReleveIndexService,\n    private notifService: NotificationService) {\n    this.releveIndex = new ReleveIndex();\n  }\n\n  addReleveIndex() {\n    this.releveIndexService.addReleveIndex(this.releveIndex)\n      .subscribe(\n        res => {\n          this.releveIndexService.getReleveIndexsList();\n          this.dialogRef.close();\n          this.notifService.success('relevé index ajouter avec succés');\n        },\n        err => console.log(err)\n      );\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n    this.releveIndexService.getIndexsNames();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvaG9tZS9SZWNldHRlL3JlbGV2ZUluZGV4LWxpc3QvcmVsZXZlSW5kZXgtZWRpdC9yZWxldmVJbmRleC1lZGl0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-toolbar>\\n    <span>Modifier relevé index</span>\\n    <span class=\\\"fill-remaining-space\\\"></span>\\n    <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n      <mat-icon>clear</mat-icon>\\n    </button>\\n  </mat-toolbar>\\n  <form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\n    <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"300px\\\">\\n      <mat-grid-tile>\\n        <div class=\\\"controles-container\\\">\\n          <input type=\\\"hidden\\\" >\\n          <mat-form-field>\\n              <input matInput placeholder=\\\"Reference index\\\" required type=\\\"text\\\" name=\\\"reference\\\"\\n                [(ngModel)]=\\\"releveIndex.reference\\\">\\n              <mat-error>Reference index is required.</mat-error>\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Départ index\\\" required type=\\\"number\\\" name=\\\"depart\\\" [(ngModel)]=\\\"releveIndex.depart\\\">\\n              <mat-error>Départ index is required.</mat-error>\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Arrivé index\\\" required type=\\\"number\\\" name=\\\"arrive\\\" [(ngModel)]=\\\"releveIndex.arrive\\\">\\n              <mat-error>Arrivé index is required.</mat-error>\\n            </mat-form-field>\\n          <div class=\\\"button-row\\\">\\n            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"angForm.pristine || angForm.invalid\\\"\\n              (click)=\\\"updateReleveIndex()\\\">Modifier type</button>\\n            <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n          </div>\\n        </div>\\n      </mat-grid-tile>\\n    </mat-grid-list>\\n  </form>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { ReleveIndex } from 'app/shared/models/ReleveIndex.model';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ReleveIndexService } from 'app/shared/services/releveIndex.service';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-releve-index-edit',\n  templateUrl: './releveIndex-edit.component.html',\n  styleUrls: ['./releveIndex-edit.component.css']\n})\nexport class ReleveIndexEditComponent implements OnInit {\n\n  public releveIndex: ReleveIndex;\n\n  constructor(\n    public dialogRef: MatDialogRef<ReleveIndexEditComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private releveIndexService: ReleveIndexService,\n    private notifservice: NotificationService) {\n    this.releveIndex = data.index;\n  }\n\n  updateReleveIndex(): void {\n    this.releveIndexService.updateReleveIndex(this.releveIndex._id, this.releveIndex)\n      .subscribe(res => {\n        this.releveIndexService.getReleveIndexsList();\n        this.dialogRef.close();\n        this.notifservice.success('Relevé index modifié avec succés');\n      },\n        err => {\n          console.log(err);\n        });\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"mat-footer-row {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n.detailsButton {\\r\\n  background: lightgray;\\r\\n  min-width: 90px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQ29tcG9uZW50cy9ob21lL1JlY2V0dGUvcmVsZXZlSW5kZXgtbGlzdC9yZWxldmVJbmRleC1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsZUFBZTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvaG9tZS9SZWNldHRlL3JlbGV2ZUluZGV4LWxpc3QvcmVsZXZlSW5kZXgtbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvb3Rlci1yb3cge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4uZGV0YWlsc0J1dHRvbiB7XHJcbiAgYmFja2dyb3VuZDogbGlnaHRncmF5O1xyXG4gIG1pbi13aWR0aDogOTBweDtcclxufVxyXG4iXX0= */\"","module.exports = \"<div class=\\\"search-div\\\">\\n  <button mat-raised-button (click)=\\\"addReleveIndexDialog()\\\">\\n    <mat-icon>add</mat-icon>Ajouter\\n  </button>\\n  <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\n    <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\n    <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\n      <mat-icon>close</mat-icon>\\n    </button>\\n  </mat-form-field>\\n</div>\\n<div class=\\\"mat-elevation-z8\\\">\\n  <mat-table [dataSource]=\\\"releveIndexService.releveIndexsMatTab\\\" matSort>\\n    <ng-container matColumnDef=\\\"reference\\\">\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Reference</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.reference}}</mat-cell>\\n      <mat-footer-cell *matFooterCellDef>Recette Carburant</mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"depart\\\">\\n      <mat-header-cell *matHeaderCellDef>Départ</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.depart}}</mat-cell>\\n      <mat-footer-cell *matFooterCellDef></mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"arrive\\\">\\n      <mat-header-cell *matHeaderCellDef>Arrivé</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.arrive}}</mat-cell>\\n      <mat-footer-cell *matFooterCellDef></mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"quantite\\\">\\n      <mat-header-cell *matHeaderCellDef>Quantité</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.quantite}}</mat-cell>\\n      <mat-footer-cell *matFooterCellDef></mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"prix\\\">\\n      <mat-header-cell *matHeaderCellDef>Prix</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.prix}}</mat-cell>\\n      <mat-footer-cell *matFooterCellDef></mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"prevue\\\">\\n      <mat-header-cell *matHeaderCellDef>Somme prévue</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.prevue}}</mat-cell>\\n      <mat-footer-cell *matFooterCellDef>{{getTotalPrevue()}}</mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"actions\\\">\\n      <mat-header-cell *matHeaderCellDef></mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">\\n        <button mat-icon-button color=\\\"primary\\\" (click)=\\\"updateReleveIndexDialog(row)\\\">\\n          <mat-icon>edit</mat-icon>\\n        </button>\\n        <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteReleveIndexDialog(row._id, 'relevé index')\\\">\\n          <mat-icon>delete_outline</mat-icon>\\n        </button>\\n      </mat-cell>\\n      <mat-footer-cell *matFooterCellDef><button mat-raised-button class=\\\"detailsButton\\\" (click)=\\\"addReleveIndexDialog()\\\">\\n        <mat-icon>add</mat-icon>Détails\\n      </button></mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"loading\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n        Loading data ...\\n      </mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"noData\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n        No data.\\n      </mat-footer-cell>\\n    </ng-container>\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n    <mat-footer-row *matFooterRowDef=\\\"displayedColumns\\\" [ngClass]=\\\"{'hide':releveIndexService.releveIndexsMatTab!=null && releveIndexService.releveIndexsMatTab.data.length==0}\\\"></mat-footer-row>\\n    <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':releveIndexService.releveIndexsMatTab!=null}\\\"></mat-footer-row>\\n    <mat-footer-row *matFooterRowDef=\\\"['noData']\\\" [ngClass]=\\\"{'hide':!(releveIndexService.releveIndexsMatTab!=null && releveIndexService.releveIndexsMatTab.data.length==0)}\\\"></mat-footer-row>\\n  </mat-table>\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"10\\\" showFirstLastButtons></mat-paginator>\\n</div>\\n\"","import { Component, OnInit, ViewChild, HostListener } from '@angular/core';\nimport { MatSort, MatPaginator, MatDialog } from '@angular/material';\nimport { ReleveIndexService } from 'app/shared/services/releveIndex.service';\nimport { ReleveIndexAddComponent } from './releveIndex-add/releveIndex-add.component';\nimport { ConfirmDeleteComponent } from 'app/Components/Shared/confirm-delete/confirm-delete.component';\nimport { ReleveIndexEditComponent } from './releveIndex-edit/releveIndex-edit.component';\nimport { ReleveIndex } from 'app/shared/models/ReleveIndex.model';\n\n@Component({\n  selector: 'app-releve-index-list',\n  templateUrl: './releveIndex-list.component.html',\n  styleUrls: ['./releveIndex-list.component.css']\n})\nexport class ReleveIndexListComponent implements OnInit {\n\n  public displayedColumns: string[];\n  public search: string;\n  screenHeight: any;\n  screenWidth: any;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n\n  constructor(\n    public releveIndexService: ReleveIndexService,\n    private dialog: MatDialog) {\n    this.getScreenSize();\n  }\n\n  @HostListener('window:resize', ['$event'])\n    getScreenSize(event?) {\n          this.screenHeight = window.innerHeight;\n          this.screenWidth = window.innerWidth;\n          if (this.screenWidth < 650) {\n            this.displayedColumns = ['reference', 'quantite', 'prevue', 'actions'];\n          } else {\n            this.displayedColumns = ['reference', 'depart', 'arrive', 'quantite', 'prix', 'prevue', 'actions'];\n          }\n    }\n\n  ngOnInit() {\n    this.releveIndexService.getReleveIndexsList(this.sort, this.paginator);\n  }\n\n  addReleveIndexDialog(): void {\n    this.dialog.open(ReleveIndexAddComponent, {\n      panelClass: 'full-width-dialog'\n    });\n  }\n\n  getTotalPrevue() {\n    return this.releveIndexService.releveIndexs.map(t => t.prevue).reduce((acc, value) => acc + value, 0);\n  }\n\n  deleteReleveIndexDialog(id: string, msg: string): void {\n\n    this.dialog.open(ConfirmDeleteComponent, {\n      data: { id, msg }\n    });\n  }\n\n  updateReleveIndexDialog(index: ReleveIndex): void {\n    this.dialog.open(ReleveIndexEditComponent, {\n      panelClass: 'full-width-dialog',\n      data: { index : Object.assign({}, index) }\n    });\n  }\n\n  filter(): void {\n    this.releveIndexService.releveIndexsMatTab.filter = this.search.trim().toLowerCase();\n  }\n\n  clearSearch(): void {\n    this.search = '';\n    this.filter();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"margin-param\\\">\\n  <mat-toolbar color=\\\"primary\\\">\\n    <span>Journée et poste</span>\\n  </mat-toolbar>\\n  <div class=\\\"mat-elevation-z8 mt-3\\\">\\n    <mat-table [dataSource]=\\\"sessionService.sessionMatTab\\\" matSort>\\n      <ng-container matColumnDef=\\\"date\\\">\\n        <mat-header-cell *matHeaderCellDef>Date</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.date}}</mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"poste\\\">\\n        <mat-header-cell *matHeaderCellDef>Poste</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.poste}}</mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"description\\\">\\n        <mat-header-cell *matHeaderCellDef>Description</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.description}}</mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"state\\\">\\n        <mat-header-cell *matHeaderCellDef>State</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.state}}</mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"loading\\\">\\n        <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n          Loading data ...\\n        </mat-footer-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"noData\\\">\\n        <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n          No data.\\n        </mat-footer-cell>\\n      </ng-container>\\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n      <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':sessionService.sessionMatTab!=null}\\\">\\n      </mat-footer-row>\\n      <mat-footer-row *matFooterRowDef=\\\"['noData']\\\"\\n        [ngClass]=\\\"{'hide':!(sessionService.sessionMatTab!=null && sessionService.sessionMatTab.data.length==0)}\\\">\\n      </mat-footer-row>\\n    </mat-table>\\n  </div>\\n</div>\\n<div class=\\\"margin-param\\\">\\n  <mat-toolbar color=\\\"primary\\\">\\n    <span>Relevé des indexes poste</span>\\n  </mat-toolbar>\\n  <app-releve-index-list></app-releve-index-list>\\n</div>\\n\"","import { Component, OnInit, HostListener } from '@angular/core';\nimport { SessionService } from 'app/shared/services/session.service';\nimport { Session } from 'app/shared/models/session.model';\nimport { MatTableDataSource } from '@angular/material';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  public displayedColumns: string[];\n  screenHeight: any;\n  screenWidth: any;\n\n  constructor(public sessionService: SessionService) {\n    this.displayedColumns = ['date', 'poste', 'description', 'state'];\n    this.getScreenSize();\n  }\n\n  @HostListener('window:resize', ['$event'])\n    getScreenSize(event?) {\n          this.screenHeight = window.innerHeight;\n          this.screenWidth = window.innerWidth;\n          if (this.screenWidth < 650) {\n            this.displayedColumns = ['date', 'poste', 'state'];\n          } else {\n            this.displayedColumns = ['date', 'poste', 'description', 'state'];\n          }\n    }\n\n  ngOnInit() {\n    this.sessionService.getCurrentSession();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9DYXJ0ZSBCb24vY2FyZC10eXBlLWxpc3QvY2FyZC10eXBlLWFkZC9jYXJkLXR5cGUtYWRkLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-toolbar>\\n  <span>Ajouter type carte bon</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\"><mat-icon>clear</mat-icon></button>\\n</mat-toolbar>\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\" (submit)=\\\"addCardType()\\\">\\n  <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"300px\\\">\\n    <mat-grid-tile>\\n      <div class=\\\"controles-container\\\">\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Code carte Bon\\\" required type=\\\"text\\\" name=\\\"cardCode\\\" [(ngModel)]=\\\"cardType.cardCode\\\">\\n          <mat-error>code carte bon is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Description\\\" required type=\\\"text\\\" name=\\\"cardDescription\\\" [(ngModel)]=\\\"cardType.cardDescription\\\">\\n          <mat-error>description carte bon is required.</mat-error>\\n        </mat-form-field>\\n        <div class=\\\"button-row\\\">\\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"angForm.pristine || angForm.invalid\\\" >Ajouter type</button>\\n          <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n        </div>\\n      </div>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormControl, NgForm } from '@angular/forms';\r\nimport { CarteBonTypeService } from 'app/shared/services/carte-bon-type.service';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { CardType } from 'app/shared/models/cardType.model';\r\nimport { NotificationService } from 'app/shared/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-card-type-add',\r\n  templateUrl: './card-type-add.component.html',\r\n  styleUrls: ['./card-type-add.component.css']\r\n})\r\nexport class CardTypeAddComponent implements OnInit {\r\n\r\n  public cardType: CardType;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CardTypeAddComponent>,\r\n    private cardTypeService: CarteBonTypeService,\r\n    private notifService: NotificationService) {\r\n    this.cardType = new CardType();\r\n  }\r\n\r\n  addCardType() {\r\n    this.cardTypeService.addCardType(this.cardType)\r\n      .subscribe(\r\n        res => {\r\n          this.cardTypeService.getCardTypesList();\r\n          this.dialogRef.close();\r\n          this.notifService.success('Carte Bon Type ajouter avec succés');\r\n        },\r\n        err => console.log(err)\r\n      );\r\n  }\r\n\r\n  onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onClear(form: NgForm): void {\r\n    form.reset();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9DYXJ0ZSBCb24vY2FyZC10eXBlLWxpc3QvY2FyZC10eXBlLWVkaXQvY2FyZC10eXBlLWVkaXQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar>\\n  <span>Modifier type carte bon</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n    <mat-icon>clear</mat-icon>\\n  </button>\\n</mat-toolbar>\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\n  <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"300px\\\">\\n    <mat-grid-tile>\\n      <div class=\\\"controles-container\\\">\\n        <input type=\\\"hidden\\\" >\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Code carte Bon\\\" required type=\\\"text\\\" name=\\\"cardCode\\\" [(ngModel)]=\\\"cardType.cardCode\\\">\\n          <mat-error>code carte bon is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Description\\\" required type=\\\"text\\\" name=\\\"cardDescription\\\" [(ngModel)]=\\\"cardType.cardDescription\\\">\\n          <mat-error>description carte bon is required.</mat-error>\\n        </mat-form-field>\\n        <div class=\\\"button-row\\\">\\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"angForm.pristine || angForm.invalid\\\"\\n            (click)=\\\"updateCardType()\\\">Modifier type</button>\\n          <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n        </div>\\n      </div>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</form>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators, FormControl, NgForm } from '@angular/forms';\nimport { CarteBonTypeService } from '../../../../../shared/services/carte-bon-type.service';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { CardType } from 'app/shared/models/cardType.model';\nimport { NotificationService } from 'app/shared/services/notification.service';\n\n\n@Component({\n  selector: 'app-card-type-edit',\n  templateUrl: './card-type-edit.component.html',\n  styleUrls: ['./card-type-edit.component.css']\n})\nexport class CardTypeEditComponent implements OnInit {\n\n  public cardType: CardType;\n\n  constructor(\n    public dialogRef: MatDialogRef<CardTypeEditComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private cardTypeService: CarteBonTypeService,\n    private notifservice: NotificationService) {\n    this.cardType = data.cardType;\n  }\n\n  updateCardType(): void {\n    this.cardTypeService.updateCardType(this.cardType._id, this.cardType)\n      .subscribe(res => {\n        this.cardTypeService.getCardTypesList();\n        this.dialogRef.close();\n        this.notifservice.success('Carte Bon type modifié avec succés');\n      },\n        err => {\n          console.log(err);\n        });\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9DYXJ0ZSBCb24vY2FyZC10eXBlLWxpc3QvY2FyZC10eXBlLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"search-div\\\">\\n  <button mat-raised-button (click)=\\\"addCardTypeDialog()\\\">\\n    <mat-icon>add</mat-icon>Ajouter\\n  </button>\\n  <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\n    <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\n    <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\n      <mat-icon>close</mat-icon>\\n    </button>\\n  </mat-form-field>\\n</div>\\n<div class=\\\"mat-elevation-z8\\\">\\n  <mat-table [dataSource]=\\\"cardTypeService.cardTypesMatTab\\\" matSort>\\n    <ng-container matColumnDef=\\\"cardCode\\\">\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Code</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.cardCode}}</mat-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"cardDescription\\\">\\n      <mat-header-cell *matHeaderCellDef>Description</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.cardDescription}}</mat-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"actions\\\">\\n      <mat-header-cell *matHeaderCellDef></mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">\\n          <button mat-icon-button color=\\\"primary\\\" (click)=\\\"updateCardTypeDialog(row)\\\">\\n              <mat-icon>edit</mat-icon>\\n          </button>\\n          <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteCardTypeDialog(row._id, 'type carte bon')\\\">\\n              <mat-icon>delete_outline</mat-icon>\\n          </button>\\n      </mat-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"loading\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n          Loading data ...\\n      </mat-footer-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"noData\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n          No data.\\n      </mat-footer-cell>\\n  </ng-container>\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n  <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':cardTypeService.cardTypesMatTab!=null}\\\"></mat-footer-row>\\n  <mat-footer-row *matFooterRowDef=\\\"['noData']\\\" [ngClass]=\\\"{'hide':!(cardTypeService.cardTypesMatTab!=null && cardTypeService.cardTypesMatTab.data.length==0)}\\\">\\n  </mat-footer-row>\\n  </mat-table>\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"5\\\" showFirstLastButtons></mat-paginator>\\n</div>\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CarteBonTypeService } from 'app/shared/services/carte-bon-type.service';\r\nimport { MatDialog, MatSort, MatPaginator } from '@angular/material';\r\nimport { CardTypeAddComponent } from './card-type-add/card-type-add.component';\r\nimport { ConfirmDeleteComponent } from '../../../Shared/confirm-delete/confirm-delete.component';\r\nimport { CardType } from 'app/shared/models/cardType.model';\r\nimport { CardTypeEditComponent } from './card-type-edit/card-type-edit.component';\r\n\r\n@Component({\r\n  selector: 'app-card-type-list',\r\n  templateUrl: './card-type-list.component.html',\r\n  styleUrls: ['./card-type-list.component.css']\r\n})\r\nexport class CardTypeListComponent implements OnInit {\r\n\r\n  public displayedColumns: string[];\r\n  public search: string;\r\n\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n  constructor(public cardTypeService: CarteBonTypeService,\r\n              private dialog: MatDialog) {\r\n    this.displayedColumns = ['cardCode', 'cardDescription', 'actions'];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cardTypeService.getCardTypesList(this.sort, this.paginator);\r\n  }\r\n\r\n  addCardTypeDialog(): void {\r\n    this.dialog.open(CardTypeAddComponent, {\r\n      panelClass: 'full-width-dialog'\r\n    });\r\n  }\r\n\r\n  deleteCardTypeDialog(id: string, msg: string): void {\r\n\r\n    this.dialog.open(ConfirmDeleteComponent, {\r\n      data: { id, msg }\r\n    });\r\n  }\r\n\r\n  updateCardTypeDialog(cardType: CardType): void {\r\n    this.dialog.open(CardTypeEditComponent, {\r\n      panelClass: 'full-width-dialog',\r\n      data: { cardType : Object.assign({}, cardType) }\r\n    });\r\n  }\r\n\r\n  filter(): void {\r\n    this.cardTypeService.cardTypesMatTab.filter = this.search.trim().toLowerCase();\r\n  }\r\n\r\n  clearSearch(): void {\r\n    this.search = '';\r\n    this.filter();\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jaXRlcm5lL2NpdGVybmUtbGlzdC9hZGQtY2l0ZXJuZS9hZGQtY2l0ZXJuZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-toolbar>\\r\\n  <span>Ajouter Citerne</span>\\r\\n  <span class=\\\"fill-remaining-space\\\"></span>\\r\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\r\\n    <mat-icon>clear</mat-icon>\\r\\n  </button>\\r\\n</mat-toolbar>\\r\\n\\r\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\r\\n  <div>\\r\\n    <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"identifiant\\\" required type=\\\"text\\\" name=\\\"identifiant\\\"\\r\\n            [(ngModel)]=\\\"citerne.identifiant\\\">\\r\\n          <mat-error>L'identifiant du citerne est obligatoire!</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"capacite\\\" required type=\\\"number\\\" name=\\\"capacite\\\" [(ngModel)]=\\\"citerne.capacite\\\">\\r\\n          <mat-error>La capacité du citerne est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Selectiooner un type</mat-label>\\r\\n          <mat-select required [(ngModel)]=\\\"citerne.type\\\" name=\\\"type\\\">\\r\\n            <mat-option value=\\\"essence\\\">Essence</mat-option>\\r\\n            <mat-option value=\\\"diesel\\\">Diesel</mat-option>\\r\\n          </mat-select>\\r\\n\\r\\n          <mat-error>Type est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n      \\r\\n    </mat-grid-list>\\r\\n\\r\\n    \\r\\n    <div class=\\\"button-row\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addCiterne()\\\"\\r\\n        [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Ajouter\\r\\n      </button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Annuler</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Citerne } from 'app/shared/models/citerne.model';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { NgForm } from '@angular/forms';\r\nimport { NotificationService } from 'app/shared/services/notification.service';\r\nimport { CiterneService } from 'app/shared/services/citerne.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-citerne',\r\n  templateUrl: './add-citerne.component.html',\r\n  styleUrls: ['./add-citerne.component.css']\r\n})\r\nexport class AddCiterneComponent implements OnInit {\r\n\r\n\r\n  public citerne: Citerne;\r\n  public width: number;\r\n\r\n  constructor(\r\n    private dialogMat: MatDialogRef<AddCiterneComponent>,\r\n    private citerneService: CiterneService,\r\n    private notifService: NotificationService) {\r\n    this.citerne = new Citerne();\r\n    this.width = 2;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (document.body.clientWidth < 600) {\r\n      this.width = 1;\r\n    }\r\n  }\r\n  onClose(): void {\r\n    this.dialogMat.close();\r\n  }\r\n\r\n  onClear(form: NgForm): void {\r\n    form.reset();\r\n  }\r\n\r\n  addCiterne(): void {\r\n    this.citerne.contenu = 0;\r\n    console.log(this.citerne);\r\n    this.citerneService.addCiterne(this.citerne).subscribe(res => {\r\n      this.citerneService.getCiternesList();\r\n      this.dialogMat.close();\r\n      this.notifService.success('Citerne ajouter avec succés');\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jaXRlcm5lL2NpdGVybmUtbGlzdC9jaXRlcm5lLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"search-div\\\">\\r\\n  <button mat-raised-button (click)=\\\"addCiterneDialog()\\\">\\r\\n    <mat-icon>add</mat-icon>Ajouter\\r\\n  </button>\\r\\n  <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\r\\n    <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\r\\n    <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n  </mat-form-field>\\r\\n</div>\\r\\n<div class=\\\"mat-elevation-z8\\\">\\r\\n  <mat-table [dataSource]=\\\"citerneService.citernesMatTab\\\" matSort>\\r\\n    <ng-container matColumnDef=\\\"identifiant\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Identifiant</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.identifiant}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"capacite\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Capacite</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.capacite}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"type\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Type</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.type}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"contenu\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Volume Restant</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.contenu}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"actions\\\">\\r\\n      <mat-header-cell *matHeaderCellDef>\\r\\n      </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\">\\r\\n        <button class=\\\"position\\\" mat-icon-button matTooltip=\\\"Editer\\\" color=\\\"primary\\\" (click)=\\\"updateCiterneDialog(row)\\\">\\r\\n          <mat-icon>edit</mat-icon>\\r\\n        </button>\\r\\n        <button class=\\\"position\\\" mat-icon-button matTooltip=\\\"Supprimer\\\" color=\\\"warn\\\"\\r\\n          (click)=\\\"deleteCiterneDialog(row._id, 'citerne')\\\">\\r\\n          <mat-icon>delete_outline</mat-icon>\\r\\n      </button>\\r\\n      </mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"loading\\\">\\r\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\r\\n        Loading data ...\\r\\n      </mat-footer-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"noData\\\">\\r\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\r\\n        No data.\\r\\n      </mat-footer-cell>\\r\\n    </ng-container>\\r\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n    <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':citerneService.citernesMatTab!=null}\\\">\\r\\n    </mat-footer-row>\\r\\n    <mat-footer-row *matFooterRowDef=\\\"['noData']\\\"\\r\\n      [ngClass]=\\\"{'hide':!(citerneService.citernesMatTab!=null && citerneService.citernesMatTab.data.length==0)}\\\">\\r\\n    </mat-footer-row>\\r\\n  </mat-table>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"5\\\" showFirstLastButtons></mat-paginator>\\r\\n</div>\\r\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatSort, MatPaginator } from '@angular/material';\r\n\r\nimport { AddCiterneComponent } from './add-citerne/add-citerne.component';\r\nimport { ConfirmDeleteComponent } from '../../../Shared/confirm-delete/confirm-delete.component';\r\nimport { UpdateCiterneComponent } from './update-citerne/update-citerne.component';\r\nimport { Citerne } from 'app/shared/models/citerne.model';\r\nimport { CiterneService } from 'app/shared/services/citerne.service';\r\n\r\n@Component({\r\n  selector: 'app-citerne-list',\r\n  templateUrl: './citerne-list.component.html',\r\n  styleUrls: ['./citerne-list.component.css']\r\n})\r\nexport class CiterneListComponent implements OnInit {\r\n\r\n  public displayedColumns: string[];\r\n  public search: string;\r\n\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n  constructor(public citerneService: CiterneService, private dialog: MatDialog) {\r\n    this.displayedColumns = ['identifiant', 'capacite', 'type', 'contenu', 'actions'];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.citerneService.getCiternesList(this.sort, this.paginator);\r\n  }\r\n\r\n\r\n  addCiterneDialog(): void {\r\n    this.dialog.open(AddCiterneComponent, {\r\n      panelClass: 'full-width-dialog'\r\n    });\r\n  }\r\n\r\n  deleteCiterneDialog(id: string, msg: string): void {\r\n\r\n    this.dialog.open(ConfirmDeleteComponent, {\r\n      data: { id, msg }\r\n    });\r\n  }\r\n\r\n  updateCiterneDialog(citerne: Citerne): void {\r\n    this.dialog.open(UpdateCiterneComponent, {\r\n      panelClass: 'full-width-dialog',\r\n      data: { citerne: Object.assign({}, citerne) }\r\n    });\r\n  }\r\n\r\n  filter(): void {\r\n    this.citerneService.citernesMatTab.filter = this.search.trim().toLowerCase();\r\n  }\r\n\r\n  clearSearch(): void {\r\n    this.search = '';\r\n    this.filter();\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jaXRlcm5lL2NpdGVybmUtbGlzdC91cGRhdGUtY2l0ZXJuZS91cGRhdGUtY2l0ZXJuZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-toolbar>\\r\\n  <span>Modifier Citerne</span>\\r\\n  <span class=\\\"fill-remaining-space\\\"></span>\\r\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\r\\n    <mat-icon>clear</mat-icon>\\r\\n  </button>\\r\\n</mat-toolbar>\\r\\n\\r\\n\\r\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\r\\n  <div>\\r\\n    <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"identifiant\\\" required type=\\\"text\\\" name=\\\"identifiant\\\"\\r\\n            [(ngModel)]=\\\"citerne.identifiant\\\">\\r\\n          <mat-error>L'identifiant est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Capacite\\\" required type=\\\"number\\\" name=\\\"capacite\\\" [(ngModel)]=\\\"citerne.capacite\\\">\\r\\n          <mat-error>La capacite est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Volume Restant\\\" required type=\\\"number\\\" name=\\\"contenu\\\" [(ngModel)]=\\\"citerne.contenu\\\">\\r\\n          <mat-error>Le volume restant est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Selectionner le type</mat-label>\\r\\n          <mat-select required [(ngModel)]=\\\"citerne.type\\\" name=\\\"type\\\">\\r\\n            <mat-option value=\\\"essence\\\">Essence</mat-option>\\r\\n            <mat-option value=\\\"diesel\\\">Diesel</mat-option>\\r\\n          </mat-select>\\r\\n\\r\\n          <mat-error>Type est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n    </mat-grid-list>\\r\\n\\r\\n    <div class=\\\"button-row\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"updateClient()\\\"\\r\\n        [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Modifier\\r\\n      </button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Annuler</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { Citerne } from 'app/shared/models/citerne.model';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { CiterneService } from 'app/shared/services/citerne.service';\r\nimport { NotificationService } from 'app/shared/services/notification.service';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-update-citerne',\r\n  templateUrl: './update-citerne.component.html',\r\n  styleUrls: ['./update-citerne.component.css']\r\n})\r\nexport class UpdateCiterneComponent implements OnInit {\r\n\r\n  public citerne: Citerne;\r\n  public width: number;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<UpdateCiterneComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private citerneService: CiterneService,\r\n    private notifservice: NotificationService) {\r\n    this.citerne = data.citerne;\r\n    this.width = 2;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (document.body.clientWidth < 600) {\r\n      this.width = 1;\r\n    }\r\n  }\r\n  onClose(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onClear(form: NgForm): void {\r\n    form.reset();\r\n  }\r\n\r\n  updateClient(): void {\r\n    this.citerneService.updateCiterne(this.citerne._id, this.citerne).subscribe(res => {\r\n      this.citerneService.getCiternesList();\r\n      this.dialogRef.close();\r\n      this.notifservice.success('Citerne modifié avec succés');\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jbGllbnQvY2xpZW50LWxpc3QvYWRkLWNsaWVudC9hZGQtY2xpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-toolbar>\\r\\n  <span>Ajouter Client</span>\\r\\n  <span class=\\\"fill-remaining-space\\\"></span>\\r\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\r\\n    <mat-icon>clear</mat-icon>\\r\\n  </button>\\r\\n</mat-toolbar>\\r\\n\\r\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\r\\n  <div>\\r\\n    <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Matricule Fiscale\\\" required type=\\\"text\\\" name=\\\"matFisc\\\"\\r\\n            [(ngModel)]=\\\"client.matFisc\\\">\\r\\n          <mat-error>Matricule Fiscale est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Nom\\\" required type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"client.name\\\">\\r\\n          <mat-error>Nom est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Email\\\" required email type=\\\"email\\\" name=\\\"email\\\" [(ngModel)]=\\\"client.email\\\"\\r\\n            #email=\\\"ngModel\\\">\\r\\n          <mat-error *ngIf=\\\"email.errors?.required\\\">Email est obligatoire</mat-error>\\r\\n          <mat-error *ngIf=\\\"email.errors?.email\\\">Email Invalide</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Type\\\" required type=\\\"text\\\" name=\\\"type\\\" [(ngModel)]=\\\"client.type\\\">\\r\\n          <mat-error>Type est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Select an option</mat-label>\\r\\n          <mat-select required [(ngModel)]=\\\"client.state\\\" name=\\\"state\\\">\\r\\n            <mat-option>None</mat-option>\\r\\n            <mat-option value=\\\"actif\\\">Actif</mat-option>\\r\\n            <mat-option value=\\\"non actif\\\">Non Actif</mat-option>\\r\\n          </mat-select>\\r\\n\\r\\n          <mat-error>Etat est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Téléphone\\\" required type=\\\"number\\\" maxlength=\\\"8\\\" name=\\\"phone\\\"\\r\\n            [(ngModel)]=\\\"client.phone\\\">\\r\\n          <mat-error>Téléphone est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Fax\\\" required type=\\\"number\\\" maxlength=\\\"8\\\" name=\\\"fax\\\" [(ngModel)]=\\\"client.fax\\\">\\r\\n          <mat-error>Fax est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Plafond Crédit\\\" required type=\\\"number\\\" min=\\\"0\\\" name=\\\"plafondCredit\\\"\\r\\n            [(ngModel)]=\\\"client.plafondCredit\\\">\\r\\n          <mat-error>Plafond Crédit est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Ville\\\" required type=\\\"text\\\" name=\\\"city\\\" [(ngModel)]=\\\"client.address.city\\\">\\r\\n          <mat-error>Ville est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Code Postal\\\" required type=\\\"number\\\" min=\\\"0\\\" maxlength=\\\"5\\\" name=\\\"postal\\\"\\r\\n            [(ngModel)]=\\\"client.address.postal\\\">\\r\\n          <mat-error>Code Postal est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n    </mat-grid-list>\\r\\n\\r\\n    <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"100px\\\">\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Region\\\" required type=\\\"text\\\" name=\\\"region\\\" [(ngModel)]=\\\"client.region\\\">\\r\\n          <mat-error>Region est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n    </mat-grid-list>\\r\\n\\r\\n\\r\\n\\r\\n    <div class=\\\"button-row\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addClient()\\\"\\r\\n        [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Ajouter\\r\\n      </button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Client } from 'app/shared/models/client.model';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ClientService } from 'app/shared/services/client.service';\r\nimport { NotificationService } from 'app/shared/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-add-client',\r\n  templateUrl: './add-client.component.html',\r\n  styleUrls: ['./add-client.component.css']\r\n})\r\nexport class AddClientComponent implements OnInit {\r\n\r\n  public client: Client;\r\n  public width: number;\r\n\r\n  constructor(private dialogMat: MatDialogRef<AddClientComponent>,\r\n              private clientService: ClientService,\r\n              private notifService: NotificationService) {\r\n    this.client = new Client();\r\n    this.width = 2;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( document.body.clientWidth < 600 ) {\r\n      this.width = 1;\r\n    }\r\n  }\r\n\r\n  onClose(): void {\r\n    this.dialogMat.close();\r\n  }\r\n\r\n  onClear(form: NgForm): void {\r\n    form.reset();\r\n  }\r\n\r\n  addClient(): void {\r\n    this.clientService.addClient(this.client).subscribe(res => {\r\n      this.clientService.getClientsList();\r\n      this.dialogMat.close();\r\n      this.notifService.success('Client ajouter avec succés');\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","module.exports = \"@media(max-width: 400px){\\r\\n    .position {\\r\\n      margin: 0;\\r\\n      padding: 0;\\r\\n      width: 30px;\\r\\n      height: 30px;\\r\\n    }\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQ29tcG9uZW50cy9wYXJhbWV0ZXJzL2NsaWVudC9jbGllbnQtbGlzdC9jbGllbnQtbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0k7TUFDRSxTQUFTO01BQ1QsVUFBVTtNQUNWLFdBQVc7TUFDWCxZQUFZO0lBQ2Q7QUFDSiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jbGllbnQvY2xpZW50LWxpc3QvY2xpZW50LWxpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBtZWRpYShtYXgtd2lkdGg6IDQwMHB4KXtcclxuICAgIC5wb3NpdGlvbiB7XHJcbiAgICAgIG1hcmdpbjogMDtcclxuICAgICAgcGFkZGluZzogMDtcclxuICAgICAgd2lkdGg6IDMwcHg7XHJcbiAgICAgIGhlaWdodDogMzBweDtcclxuICAgIH1cclxufVxyXG4iXX0= */\"","module.exports = \"<!--<app-card-type-add></app-card-type-add>-->\\r\\n<div class=\\\"search-div\\\">\\r\\n  <button mat-raised-button (click)=\\\"addClientDialog()\\\">\\r\\n    <mat-icon>add</mat-icon>Ajouter\\r\\n  </button>\\r\\n  <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\r\\n    <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\r\\n    <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n  </mat-form-field>\\r\\n</div>\\r\\n<div class=\\\"mat-elevation-z8\\\">\\r\\n  <mat-table [dataSource]=\\\"clientService.clientsMatTab\\\" matSort>\\r\\n    <ng-container matColumnDef=\\\"name\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Nom</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.name}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"matFisc\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Matricule Fiscale</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.matFisc}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"state\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Etat</mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.state}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"actions\\\">\\r\\n      <mat-header-cell *matHeaderCellDef>\\r\\n      </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\">\\r\\n        <button class=\\\"position\\\" mat-icon-button matTooltip=\\\"Voir plus\\\" (click)=\\\"seeMoreDialog(row)\\\">\\r\\n          <mat-icon>remove_red_eye</mat-icon>\\r\\n        </button>\\r\\n        <button class=\\\"position\\\" mat-icon-button matTooltip=\\\"Editer\\\" color=\\\"primary\\\" (click)=\\\"updateClientDialog(row)\\\">\\r\\n          <mat-icon>edit</mat-icon>\\r\\n        </button>\\r\\n        <button class=\\\"position\\\" mat-icon-button matTooltip=\\\"Supprimer\\\" color=\\\"warn\\\"\\r\\n          (click)=\\\"deleteClientDialog(row._id, 'client')\\\">\\r\\n          <mat-icon>delete_outline</mat-icon>\\r\\n        </button>\\r\\n      </mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"loading\\\">\\r\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\r\\n        Loading data ...\\r\\n      </mat-footer-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"noData\\\">\\r\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\r\\n        No data.\\r\\n      </mat-footer-cell>\\r\\n    </ng-container>\\r\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n    <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':clientService.clientsMatTab!=null}\\\">\\r\\n    </mat-footer-row>\\r\\n    <mat-footer-row *matFooterRowDef=\\\"['noData']\\\"\\r\\n      [ngClass]=\\\"{'hide':!(clientService.clientsMatTab!=null && clientService.clientsMatTab.data.length==0)}\\\">\\r\\n    </mat-footer-row>\\r\\n  </mat-table>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"5\\\" showFirstLastButtons></mat-paginator>\\r\\n</div>\\r\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ClientService } from 'app/shared/services/client.service';\r\nimport { MatDialog, MatSort, MatPaginator } from '@angular/material';\r\nimport { MoreDetailsComponent } from './more-details/more-details.component';\r\nimport { AddClientComponent } from './add-client/add-client.component';\r\nimport { ConfirmDeleteComponent } from '../../../Shared/confirm-delete/confirm-delete.component';\r\nimport { Client } from 'app/shared/models/client.model';\r\nimport { UpdateClientComponent } from './update-client/update-client.component';\r\n\r\n@Component({\r\n  selector: 'app-client-list',\r\n  templateUrl: './client-list.component.html',\r\n  styleUrls: ['./client-list.component.css']\r\n})\r\nexport class ClientListComponent implements OnInit {\r\n\r\n  public displayedColumns: string[];\r\n  public search: string;\r\n\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n  constructor(public clientService: ClientService, private dialog: MatDialog) {\r\n    this.displayedColumns = ['name', 'matFisc', 'state', 'actions'];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.clientService.getClientsList(this.sort, this.paginator);\r\n  }\r\n\r\n  seeMoreDialog(client): void {\r\n    this.dialog.open(MoreDetailsComponent, {\r\n      panelClass: 'full-width-dialog',\r\n      height: '500px',\r\n      data: { client }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  addClientDialog(): void {\r\n    this.dialog.open(AddClientComponent, {\r\n      panelClass: 'full-width-dialog'\r\n    });\r\n  }\r\n\r\n  deleteClientDialog(id: string, msg: string): void {\r\n\r\n    this.dialog.open(ConfirmDeleteComponent, {\r\n      data: { id, msg }\r\n    });\r\n  }\r\n\r\n  updateClientDialog(client: Client): void {\r\n    this.dialog.open(UpdateClientComponent, {\r\n      panelClass: 'full-width-dialog',\r\n      data: { client: Object.assign({}, client) }\r\n    });\r\n  }\r\n\r\n  filter(): void {\r\n    this.clientService.clientsMatTab.filter = this.search.trim().toLowerCase();\r\n  }\r\n\r\n  clearSearch(): void {\r\n    this.search = '';\r\n    this.filter();\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jbGllbnQvY2xpZW50LWxpc3QvbW9yZS1kZXRhaWxzL21vcmUtZGV0YWlscy5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div mat-dialog-content>\\r\\n    <mat-list>\\r\\n        <mat-list-item><h4>Email : </h4>&nbsp;&nbsp;{{client.email}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Type : </h4>&nbsp;&nbsp;{{client.type}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Ville : </h4>&nbsp;&nbsp;{{client.address.city}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Region : </h4>&nbsp;&nbsp;{{client.region}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Code Postal : </h4>&nbsp;&nbsp;{{client.address.postal}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Téléphone : </h4>&nbsp;&nbsp;{{client.phone}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Fax : </h4>&nbsp;&nbsp;{{client.fax}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-list-item><h4>Plafond Crédit : </h4>&nbsp;&nbsp;{{client.plafondCredit}}</mat-list-item>\\r\\n        <mat-divider></mat-divider>\\r\\n    </mat-list>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <button mat-raised-button (click)=\\\"onNoClick()\\\" color=\\\"primary\\\">Fermer</button>\\r\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { Client } from 'app/shared/models/client.model';\r\n\r\n@Component({\r\n  selector: 'app-more-details',\r\n  templateUrl: './more-details.component.html',\r\n  styleUrls: ['./more-details.component.css']\r\n})\r\nexport class MoreDetailsComponent implements OnInit {\r\n\r\n  public client: Client;\r\n\r\n  constructor(public dialogRef: MatDialogRef<MoreDetailsComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: any) {\r\n      this.client = data.client;\r\n     }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9jbGllbnQvY2xpZW50LWxpc3QvdXBkYXRlLWNsaWVudC91cGRhdGUtY2xpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-toolbar>\\r\\n  <span>Modifier Client</span>\\r\\n  <span class=\\\"fill-remaining-space\\\"></span>\\r\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\r\\n    <mat-icon>clear</mat-icon>\\r\\n  </button>\\r\\n</mat-toolbar>\\r\\n\\r\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\r\\n  <div>\\r\\n    <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Matricule Fiscale\\\" required type=\\\"text\\\" name=\\\"matFisc\\\"\\r\\n            [(ngModel)]=\\\"client.matFisc\\\">\\r\\n          <mat-error>Matricule Fiscale est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Nom\\\" required type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"client.name\\\">\\r\\n          <mat-error>Nom est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Email\\\" required email type=\\\"email\\\" name=\\\"email\\\" [(ngModel)]=\\\"client.email\\\"\\r\\n            #email=\\\"ngModel\\\">\\r\\n          <mat-error *ngIf=\\\"email.errors?.required\\\">Email est obligatoire</mat-error>\\r\\n          <mat-error *ngIf=\\\"email.errors?.email\\\">Email Invalide</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Type\\\" required type=\\\"text\\\" name=\\\"type\\\" [(ngModel)]=\\\"client.type\\\">\\r\\n          <mat-error>Type est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <mat-label>Select an option</mat-label>\\r\\n          <mat-select required [(ngModel)]=\\\"client.state\\\" name=\\\"state\\\">\\r\\n            <mat-option>None</mat-option>\\r\\n            <mat-option value=\\\"actif\\\">Actif</mat-option>\\r\\n            <mat-option value=\\\"non actif\\\">Non Actif</mat-option>\\r\\n          </mat-select>\\r\\n\\r\\n          <mat-error>Etat est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Téléphone\\\" required type=\\\"number\\\" maxlength=\\\"8\\\" name=\\\"phone\\\"\\r\\n            [(ngModel)]=\\\"client.phone\\\">\\r\\n          <mat-error>Téléphone est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Fax\\\" required type=\\\"number\\\" maxlength=\\\"8\\\" name=\\\"fax\\\" [(ngModel)]=\\\"client.fax\\\">\\r\\n          <mat-error>Fax est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Plafond Crédit\\\" required type=\\\"number\\\" min=\\\"0\\\" name=\\\"plafondCredit\\\"\\r\\n            [(ngModel)]=\\\"client.plafondCredit\\\">\\r\\n          <mat-error>Plafond Crédit est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Ville\\\" required type=\\\"text\\\" name=\\\"city\\\" [(ngModel)]=\\\"client.address.city\\\">\\r\\n          <mat-error>Ville est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Code Postal\\\" required type=\\\"number\\\" min=\\\"0\\\" maxlength=\\\"5\\\" name=\\\"postal\\\"\\r\\n            [(ngModel)]=\\\"client.address.postal\\\">\\r\\n          <mat-error>Code Postal est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n\\r\\n    </mat-grid-list>\\r\\n\\r\\n    <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"100px\\\">\\r\\n      <mat-grid-tile>\\r\\n        <mat-form-field>\\r\\n          <input matInput placeholder=\\\"Region\\\" required type=\\\"text\\\" name=\\\"region\\\" [(ngModel)]=\\\"client.region\\\">\\r\\n          <mat-error>Region est obligatoire</mat-error>\\r\\n        </mat-form-field>\\r\\n      </mat-grid-tile>\\r\\n    </mat-grid-list>\\r\\n\\r\\n\\r\\n\\r\\n    <div class=\\\"button-row\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"updateClient()\\\"\\r\\n        [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Modifier\\r\\n      </button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { Client } from 'app/shared/models/client.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ClientService } from 'app/shared/services/client.service';\r\nimport { NotificationService } from 'app/shared/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-update-client',\r\n  templateUrl: './update-client.component.html',\r\n  styleUrls: ['./update-client.component.css']\r\n})\r\nexport class UpdateClientComponent implements OnInit {\r\n\r\n  public client: Client;\r\n  public width: number;\r\n\r\n  constructor(public dialogRef: MatDialogRef<UpdateClientComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: any,\r\n              private clientService: ClientService,\r\n              private notifservice: NotificationService) {\r\n    this.client = data.client;\r\n    this.width = 2;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (document.body.clientWidth < 600) {\r\n      this.width = 1;\r\n    }\r\n  }\r\n\r\n  onClose(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onClear(form: NgForm): void {\r\n    form.reset();\r\n  }\r\n\r\n  updateClient(): void {\r\n    this.clientService.updateClient(this.client._id, this.client).subscribe(res => {\r\n      this.clientService.getClientsList();\r\n      this.dialogRef.close();\r\n      this.notifservice.success('Client modifié avec succés');\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9kaXN0cmlidXRldXIvZGlzdHJpYnV0ZXVyLWxpc3QvZGlzdHJpYnV0ZXVyLWFkZC9kaXN0cmlidXRldXItYWRkLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-toolbar>\\n  <span>Ajouter Distributeur</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n    <mat-icon>clear</mat-icon>\\n  </button>\\n</mat-toolbar>\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\" (submit)=\\\"addDistributeur()\\\">\\n  <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\n    <mat-grid-tile>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Reference\\\" required type=\\\"text\\\" name=\\\"reference\\\"\\n          [(ngModel)]=\\\"distributeur.reference\\\">\\n        <mat-error>code carte bon is required.</mat-error>\\n      </mat-form-field>\\n    </mat-grid-tile>\\n    <mat-grid-tile>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Libellé\\\" required type=\\\"text\\\" name=\\\"libelle\\\" [(ngModel)]=\\\"distributeur.libelle\\\">\\n        <mat-error>Libellé carte bon is required.</mat-error>\\n      </mat-form-field>\\n    </mat-grid-tile>\\n    <mat-grid-tile>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"N Immatriculation\\\" type=\\\"number\\\" name=\\\"numImmatriculation\\\"\\n          [(ngModel)]=\\\"distributeur.numImmatriculation\\\">\\n      </mat-form-field>\\n    </mat-grid-tile>\\n    <mat-grid-tile>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Année fabrication\\\" type=\\\"number\\\" name=\\\"anneeFabrication\\\"\\n          [(ngModel)]=\\\"distributeur.anneeFabrication\\\">\\n      </mat-form-field>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n  <div class=\\\"button-row\\\">\\n    <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Ajouter\\n    </button>\\n    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n  </div>\\n</form>\\n\"","import { Component, OnInit, HostListener } from '@angular/core';\nimport { Distributeur } from 'app/shared/models/distributeur.model';\nimport { MatDialogRef } from '@angular/material';\nimport { DistributeurService } from 'app/shared/services/distributeur.service';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-distributeur-add',\n  templateUrl: './distributeur-add.component.html',\n  styleUrls: ['./distributeur-add.component.css']\n})\nexport class DistributeurAddComponent implements OnInit {\n\n  public distributeur: Distributeur;\n  public width: number;\n  screenHeight: any;\n  screenWidth: any;\n\n  constructor(\n    private dialogRef: MatDialogRef<DistributeurAddComponent>,\n    private distributeurService: DistributeurService,\n    private notifService: NotificationService) {\n    this.distributeur = new Distributeur();\n    this.getScreenSize();\n  }\n\n  addDistributeur() {\n    this.distributeurService.addDistributeur(this.distributeur)\n      .subscribe(\n        res => {\n          this.distributeurService.getDistributeursList();\n          this.dialogRef.close();\n          this.notifService.success('Distributeur ajouter avec succés');\n        },\n        err => console.log(err)\n      );\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  @HostListener('window:resize', ['$event'])\n    getScreenSize(event?) {\n          this.screenHeight = window.innerHeight;\n          this.screenWidth = window.innerWidth;\n          if (this.screenWidth < 650) {\n            this.width = 1;\n          } else {\n            this.width = 2;\n          }\n    }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9kaXN0cmlidXRldXIvZGlzdHJpYnV0ZXVyLWxpc3QvZGlzdHJpYnV0ZXVyLWVkaXQvZGlzdHJpYnV0ZXVyLWVkaXQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar>\\n  <span>Modifier distributeur</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n    <mat-icon>clear</mat-icon>\\n  </button>\\n</mat-toolbar>\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\n  <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"300px\\\">\\n    <mat-grid-tile>\\n      <div class=\\\"controles-container\\\">\\n        <input type=\\\"hidden\\\">\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Reference\\\" required type=\\\"text\\\" name=\\\"reference\\\"\\n            [(ngModel)]=\\\"distributeur.cardCode\\\">\\n          <mat-error>code carte bon is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Libellé\\\" required type=\\\"text\\\" name=\\\"libelle\\\" [(ngModel)]=\\\"distributeur.libelle\\\">\\n          <mat-error>Libellé carte bon is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"N Immatriculation\\\" type=\\\"number\\\" name=\\\"numImmatriculation\\\"\\n            [(ngModel)]=\\\"distributeur.numImmatriculation\\\">\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Année fabrication\\\" type=\\\"number\\\" name=\\\"anneeFabrication\\\"\\n            [(ngModel)]=\\\"distributeur.anneeFabrication\\\">\\n        </mat-form-field>\\n        <div class=\\\"button-row\\\">\\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"angForm.pristine || angForm.invalid\\\"\\n            (click)=\\\"updateDistributeur()\\\">Modifier type</button>\\n          <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n        </div>\\n      </div>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</form>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { Distributeur } from 'app/shared/models/distributeur.model';\nimport { DistributeurService } from 'app/shared/services/distributeur.service';\n\n@Component({\n  selector: 'app-distributeur-edit',\n  templateUrl: './distributeur-edit.component.html',\n  styleUrls: ['./distributeur-edit.component.css']\n})\nexport class DistributeurEditComponent implements OnInit {\n\n  public distributeur: Distributeur;\n\n  constructor(\n    public dialogRef: MatDialogRef<DistributeurEditComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private distributeurService: DistributeurService,\n    private notifservice: NotificationService) {\n    this.distributeur = data.distributeur;\n  }\n\n  updateDistributeur(): void {\n    this.distributeurService.updateDistributeur(this.distributeur._id, this.distributeur)\n      .subscribe(res => {\n        this.distributeurService.getDistributeursList();\n        this.dialogRef.close();\n        this.notifservice.success('Distributeur modifié avec succés');\n      },\n        err => {\n          console.log(err);\n        });\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9kaXN0cmlidXRldXIvZGlzdHJpYnV0ZXVyLWxpc3QvZGlzdHJpYnV0ZXVyLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"search-div\\\">\\n    <button mat-raised-button (click)=\\\"addDistributeurDialog()\\\">\\n      <mat-icon>add</mat-icon>Ajouter\\n    </button>\\n    <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\n      <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\n      <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\n        <mat-icon>close</mat-icon>\\n      </button>\\n    </mat-form-field>\\n  </div>\\n  <div class=\\\"mat-elevation-z8\\\">\\n    <mat-table [dataSource]=\\\"distributeurService.distributeursMatTab\\\" matSort>\\n      <ng-container matColumnDef=\\\"reference\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Reference</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.reference}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"libelle\\\">\\n        <mat-header-cell *matHeaderCellDef>Libellé</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.libelle}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"numImmatriculation\\\">\\n        <mat-header-cell *matHeaderCellDef>N Immatriculation</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.numImmatriculation}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"anneeFabrication\\\">\\n        <mat-header-cell *matHeaderCellDef>Année fabrication</mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">{{element.anneeFabrication}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"actions\\\">\\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n            <button mat-icon-button color=\\\"primary\\\" (click)=\\\"updateDistributeurDialog(row)\\\">\\n                <mat-icon>edit</mat-icon>\\n            </button>\\n            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteDistributeurDialog(row._id, 'distributeur')\\\">\\n                <mat-icon>delete_outline</mat-icon>\\n            </button>\\n        </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"loading\\\">\\n        <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n            Loading data ...\\n        </mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"noData\\\">\\n        <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n            No data.\\n        </mat-footer-cell>\\n    </ng-container>\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n    <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':distributeurService.distributeursMatTab!=null}\\\"></mat-footer-row>\\n    <mat-footer-row *matFooterRowDef=\\\"['noData']\\\" [ngClass]=\\\"{'hide':!(distributeurService.distributeursMatTab!=null && distributeurService.distributeursMatTab.data.length==0)}\\\">\\n    </mat-footer-row>\\n    </mat-table>\\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"5\\\" showFirstLastButtons></mat-paginator>\\n  </div>\\n\\n\"","import { Component, OnInit, ViewChild, HostListener } from '@angular/core';\nimport { DistributeurService } from 'app/shared/services/distributeur.service';\nimport { MatDialog, MatPaginator, MatSort } from '@angular/material';\nimport { DistributeurAddComponent } from './distributeur-add/distributeur-add.component';\nimport { ConfirmDeleteComponent } from 'app/Components/Shared/confirm-delete/confirm-delete.component';\nimport { Distributeur } from 'app/shared/models/distributeur.model';\nimport { DistributeurEditComponent } from './distributeur-edit/distributeur-edit.component';\n\n@Component({\n  selector: 'app-distributeur-list',\n  templateUrl: './distributeur-list.component.html',\n  styleUrls: ['./distributeur-list.component.css']\n})\nexport class DistributeurListComponent implements OnInit {\n\n  public displayedColumns: string[];\n  public search: string;\n  screenHeight: any;\n  screenWidth: any;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    public distributeurService: DistributeurService,\n    private dialog: MatDialog) {\n    this.getScreenSize();\n    }\n\n  @HostListener('window:resize', ['$event'])\n  getScreenSize(event?) {\n    this.screenHeight = window.innerHeight;\n    this.screenWidth = window.innerWidth;\n    if (this.screenWidth < 650) {\n      this.displayedColumns =  ['reference', 'libelle', 'actions'];\n    } else {\n      this.displayedColumns =  ['reference', 'libelle', 'numImmatriculation', 'anneeFabrication', 'actions'];\n    }\n  }\n\n  ngOnInit() {\n    this.distributeurService.getDistributeursList(this.sort, this.paginator);\n  }\n\n  addDistributeurDialog(): void {\n    this.dialog.open(DistributeurAddComponent, {\n      panelClass: 'full-width-dialog'\n    });\n  }\n\n  deleteDistributeurDialog(id: string, msg: string): void {\n\n    this.dialog.open(ConfirmDeleteComponent, {\n      data: { id, msg }\n    });\n  }\n\n  updatedistributeurDialog(distributeur: Distributeur): void {\n    this.dialog.open(DistributeurEditComponent, {\n      panelClass: 'full-width-dialog',\n      data: { distributeur: Object.assign({}, distributeur) }\n    });\n  }\n\n  filter(): void {\n    this.distributeurService.distributeursMatTab.filter = this.search.trim().toLowerCase();\n  }\n\n  clearSearch(): void {\n    this.search = '';\n    this.filter();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9pbmRleC9pbmRleC1saXN0L2luZGV4LWFkZC9pbmRleC1hZGQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar>\\n  <span>Ajouter Index</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n    <mat-icon>clear</mat-icon>\\n  </button>\\n</mat-toolbar>\\n\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\n  <div>\\n    <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Reference\\\" required type=\\\"text\\\" name=\\\"reference\\\" [(ngModel)]=\\\"index.reference\\\">\\n          <mat-error>Reference is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Valeur Index\\\" required type=\\\"number\\\" name=\\\"valeurIndex\\\"\\n            [(ngModel)]=\\\"index.valeurIndex\\\">\\n          <mat-error>Valeur Index is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Type carburant\\\" required type=\\\"text\\\" name=\\\"carburant\\\"\\n            [(ngModel)]=\\\"index.carburant\\\">\\n          <mat-error>Type carburant is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <mat-label>Citerne</mat-label>\\n          <mat-select required name=\\\"citerne\\\" [(ngModel)]=\\\"index.citerne\\\">\\n            <mat-option>None</mat-option>\\n            <mat-option *ngFor=\\\"let name of citerneList\\\" [value]=\\\"name\\\" >\\n              {{name}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>Citerne is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <mat-label>Distributeur</mat-label>\\n          <mat-select required name=\\\"distributeur\\\" [(ngModel)]=\\\"index.distributeur\\\">\\n            <mat-option>None</mat-option>\\n            <mat-option *ngFor=\\\"let name of distributeurList\\\" [value]=\\\"name\\\" >\\n              {{name}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>Distributeur is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n    </mat-grid-list>\\n\\n\\n    <div class=\\\"button-row\\\">\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addIndex()\\\"\\n        [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Ajouter\\n      </button>\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n    </div>\\n  </div>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Index } from 'app/shared/models/Index.model';\nimport { MatDialogRef } from '@angular/material';\nimport { IndexService } from 'app/shared/services/index.service';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { NgForm } from '@angular/forms';\nimport { CiterneService } from 'app/shared/services/citerne.service';\nimport { DistributeurService } from 'app/shared/services/distributeur.service';\n\n@Component({\n  selector: 'app-index-add',\n  templateUrl: './index-add.component.html',\n  styleUrls: ['./index-add.component.css']\n})\nexport class IndexAddComponent implements OnInit {\n\n  public index: Index;\n  public width: number;\n  public citerneList: string[];\n  public distributeurList: string[];\n\n  constructor(\n    private dialogRef: MatDialogRef<IndexAddComponent>,\n    private indexService: IndexService,\n    private citerneService: CiterneService,\n    private distributeurService: DistributeurService,\n    private notifService: NotificationService) {\n    this.index = new Index();\n    this.width = 2;\n    this.citerneList = [];\n    this.distributeurList = [];\n    this.citerneService.getCiternesList();\n    this.getCiterneNamesList();\n    this.distributeurService.getDistributeursList();\n    this.getDistributeurNamesList();\n  }\n\n  getCiterneNamesList() {\n    let i;\n    for (i = 0; i < this.citerneService.citernes.length; i++) {\n      this.citerneList.push(this.citerneService.citernes[i].identifiant);\n    }\n  }\n\n  getDistributeurNamesList() {\n    let i;\n    for (i = 0; i < this.distributeurService.distributeurs.length; i++) {\n      this.distributeurList.push(this.distributeurService.distributeurs[i].reference);\n    }\n  }\n\n  addIndex() {\n    const datetime = new Date();\n    const date = datetime.toISOString().slice(0, 10);\n    this.index.dernierDate = date;\n    this.indexService.addIndex(this.index)\n      .subscribe(\n        res => {\n          this.indexService.getIndexList();\n          this.dialogRef.close();\n          this.notifService.success('Index ajouter avec succés');\n        },\n        err => console.log(err)\n      );\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n    if ( document.body.clientWidth < 600 ) {\n      this.width = 1;\n    }\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9pbmRleC9pbmRleC1saXN0L2luZGV4LWVkaXQvaW5kZXgtZWRpdC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-toolbar>\\n  <span>Modifier Index</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\">\\n    <mat-icon>clear</mat-icon>\\n  </button>\\n</mat-toolbar>\\n\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\">\\n  <div>\\n    <mat-grid-list [cols]=\\\"width\\\" rowHeight=\\\"100px\\\">\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Reference\\\" required type=\\\"text\\\" name=\\\"reference\\\" [(ngModel)]=\\\"index.reference\\\">\\n          <mat-error>Reference is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Valeur Index\\\" required type=\\\"number\\\" name=\\\"valeurIndex\\\"\\n            [(ngModel)]=\\\"index.valeurIndex\\\">\\n          <mat-error>Valeur Index is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Type carburant\\\" required type=\\\"text\\\" name=\\\"carburant\\\"\\n            [(ngModel)]=\\\"index.carburant\\\">\\n          <mat-error>Type carburant is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Citerne\\\" required type=\\\"text\\\" name=\\\"citerne\\\" [(ngModel)]=\\\"index.citerne\\\">\\n          <mat-error>Citerne is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Distributeur\\\" required type=\\\"text\\\" name=\\\"distributeur\\\"\\n            [(ngModel)]=\\\"index.distributeur\\\">\\n          <mat-error>Distributeur is required.</mat-error>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n    </mat-grid-list>\\n\\n    <div class=\\\"button-row\\\">\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"updateIndex()\\\"\\n        [disabled]=\\\"angForm.pristine || angForm.invalid\\\">Modifier\\n      </button>\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n    </div>\\n  </div>\\n</form>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { Index } from 'app/shared/models/Index.model';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { IndexService } from 'app/shared/services/index.service';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-index-edit',\n  templateUrl: './index-edit.component.html',\n  styleUrls: ['./index-edit.component.css']\n})\nexport class IndexEditComponent implements OnInit {\n\n  public index: Index;\n  public width: number;\n\n  constructor(\n    public dialogRef: MatDialogRef<IndexEditComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private indexService: IndexService,\n    private notifservice: NotificationService) {\n    this.index = data.index;\n    this.width = 2;\n  }\n\n  updateIndex(): void {\n    this.indexService.updateIndex(this.index._id, this.index)\n      .subscribe(res => {\n        this.indexService.getIndexList();\n        this.dialogRef.close();\n        this.notifservice.success('Index modifié avec succés');\n      },\n        err => {\n          console.log(err);\n        });\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9pbmRleC9pbmRleC1saXN0L2luZGV4LWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"search-div\\\">\\n  <button mat-raised-button (click)=\\\"addIndexDialog()\\\">\\n    <mat-icon>add</mat-icon>Ajouter\\n  </button>\\n  <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\n    <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\n    <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\n      <mat-icon>close</mat-icon>\\n    </button>\\n  </mat-form-field>\\n</div>\\n<div class=\\\"mat-elevation-z8\\\">\\n  <mat-table [dataSource]=\\\"indexService.indexsMatTab\\\" matSort>\\n    <ng-container matColumnDef=\\\"reference\\\">\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Reference</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.reference}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"valeurIndex\\\">\\n      <mat-header-cell *matHeaderCellDef>Valeur index</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.valeurIndex}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"dernierDate\\\">\\n      <mat-header-cell *matHeaderCellDef>Dernier date</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.dernierDate}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"carburant\\\">\\n      <mat-header-cell *matHeaderCellDef>Carburant</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.carburant}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"citerne\\\">\\n      <mat-header-cell *matHeaderCellDef>Citerne</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.citerne}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"distributeur\\\">\\n      <mat-header-cell *matHeaderCellDef>Distributeur</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.distributeur}}</mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"actions\\\">\\n      <mat-header-cell *matHeaderCellDef></mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">\\n        <button mat-icon-button color=\\\"primary\\\" (click)=\\\"updateIndexDialog(row)\\\">\\n          <mat-icon>edit</mat-icon>\\n        </button>\\n        <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteIndexDialog(row._id, 'index')\\\">\\n          <mat-icon>delete_outline</mat-icon>\\n        </button>\\n      </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"loading\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n        Loading data ...\\n      </mat-footer-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"noData\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n        No data.\\n      </mat-footer-cell>\\n    </ng-container>\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n    <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':indexService.indexsMatTab!=null}\\\">\\n    </mat-footer-row>\\n    <mat-footer-row *matFooterRowDef=\\\"['noData']\\\"\\n      [ngClass]=\\\"{'hide':!(indexService.indexsMatTab!=null && indexService.indexsMatTab.data.length==0)}\\\">\\n    </mat-footer-row>\\n  </mat-table>\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"5\\\" showFirstLastButtons></mat-paginator>\\n</div>\\n\"","import { Component, OnInit, ViewChild, HostListener } from '@angular/core';\nimport { MatSort, MatPaginator, MatDialog } from '@angular/material';\nimport { IndexService } from 'app/shared/services/index.service';\nimport { IndexAddComponent } from './index-add/index-add.component';\nimport { ConfirmDeleteComponent } from 'app/Components/Shared/confirm-delete/confirm-delete.component';\nimport { Index } from 'app/shared/models/Index.model';\nimport { IndexEditComponent } from './index-edit/index-edit.component';\n\n@Component({\n  selector: 'app-index-list',\n  templateUrl: './index-list.component.html',\n  styleUrls: ['./index-list.component.css']\n})\nexport class IndexListComponent implements OnInit {\n\n  public displayedColumns: string[];\n  public search: string;\n  screenHeight: any;\n  screenWidth: any;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    public indexService: IndexService,\n    private dialog: MatDialog) {\n    this.getScreenSize();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  getScreenSize(event?) {\n    this.screenHeight = window.innerHeight;\n    this.screenWidth = window.innerWidth;\n    if (this.screenWidth < 650) {\n      this.displayedColumns =  ['reference', 'valeurIndex', 'carburant', 'actions'];\n    } else {\n      this.displayedColumns =  ['reference', 'valeurIndex', 'dernierDate', 'carburant', 'citerne', 'distributeur', 'actions'];\n    }\n  }\n\n  ngOnInit() {\n    this.indexService.getIndexList(this.sort, this.paginator);\n  }\n\n  addIndexDialog(): void {\n    this.dialog.open(IndexAddComponent, {\n      panelClass: 'full-width-dialog'\n    });\n  }\n\n  deleteIndexDialog(id: string, msg: string): void {\n\n    this.dialog.open(ConfirmDeleteComponent, {\n      data: { id, msg }\n    });\n  }\n\n  updateIndexDialog(index: Index): void {\n    this.dialog.open(IndexEditComponent, {\n      panelClass: 'full-width-dialog',\n      data: { index: Object.assign({}, index) }\n    });\n  }\n\n  filter(): void {\n    this.indexService.indexsMatTab.filter = this.search.trim().toLowerCase();\n  }\n\n  clearSearch(): void {\n    this.search = '';\n    this.filter();\n  }\n}\n","module.exports = \"\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9wYXJhbWV0ZXJzLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"margin-param\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <span>Carte Bon Types</span>\\r\\n  </mat-toolbar>\\r\\n  <app-card-type-list></app-card-type-list>\\r\\n</div>\\r\\n<div class=\\\"margin-param\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <span>Clients</span>\\r\\n  </mat-toolbar>\\r\\n  <app-client-list></app-client-list>\\r\\n</div>\\r\\n<div class=\\\"margin-param\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <span>Citernes</span>\\r\\n  </mat-toolbar>\\r\\n  <app-citerne-list></app-citerne-list>\\r\\n</div>\\r\\n<div class=\\\"margin-param\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <span>Indexs</span>\\r\\n  </mat-toolbar>\\r\\n  <app-index-list></app-index-list>\\r\\n</div>\\r\\n<div class=\\\"margin-param\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <span>Distributeur</span>\\r\\n  </mat-toolbar>\\r\\n  <app-distributeur-list></app-distributeur-list>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { CardType } from '../../shared/models/cardType.model';\n\n@Component({\n  selector: 'app-parameters',\n  templateUrl: './parameters.component.html',\n  styleUrls: ['./parameters.component.css']\n})\nexport class ParametersComponent implements OnInit {\n\n  cardType = {cardCode: '', cardDescription: '' };\n  cardTypes: CardType[];\n  angForm: FormGroup;\n  constructor(private formBuilder: FormBuilder) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.angForm = this.formBuilder.group({\n      cardCode: ['', Validators.required],\n      cardDescription: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n   }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9wcml4Q2FyYnVyYW50L3ByaXgtQ2FyYnVyYW50LWxpc3QvcHJpeC1jYXJidXJhbnQtYWRkL3ByaXgtY2FyYnVyYW50LWFkZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-toolbar>\\n  <span>Ajouter prix carburant</span>\\n  <span class=\\\"fill-remaining-space\\\"></span>\\n  <button class=\\\"btn-dialog-close\\\" mat-stroked-button (click)=\\\"onClose()\\\" tabIndex=\\\"-1\\\"><mat-icon>clear</mat-icon></button>\\n</mat-toolbar>\\n<form mat-dialog-content class=\\\"normal-form\\\" #angForm=\\\"ngForm\\\" (submit)=\\\"addCarburant()\\\">\\n  <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"300px\\\">\\n    <mat-grid-tile>\\n      <div class=\\\"controles-container\\\">\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Carburant\\\" required type=\\\"text\\\" name=\\\"carburant\\\" [(ngModel)]=\\\"carburant.carburant\\\">\\n          <mat-error>carburant is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Prix\\\" required type=\\\"number\\\" name=\\\"prix\\\" [(ngModel)]=\\\"carburant.prix\\\">\\n          <mat-error>prix Carburant is required.</mat-error>\\n        </mat-form-field>\\n        <div class=\\\"button-row\\\">\\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"angForm.pristine || angForm.invalid\\\" >Ajouter Prix</button>\\n          <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onClear(angForm)\\\">Reset</button>\\n        </div>\\n      </div>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Carburant } from 'app/shared/models/carburant';\nimport { MatDialogRef } from '@angular/material';\nimport { PrixCarburantService } from 'app/shared/services/prix-carburant.service';\nimport { NotificationService } from 'app/shared/services/notification.service';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-prix-carburant-add',\n  templateUrl: './prix-carburant-add.component.html',\n  styleUrls: ['./prix-carburant-add.component.css']\n})\nexport class PrixCarburantAddComponent implements OnInit {\n\n  public carburant: Carburant;\n\n  constructor(\n    private dialogRef: MatDialogRef<PrixCarburantAddComponent>,\n    private carburantService: PrixCarburantService,\n    private notifService: NotificationService) {\n    this.carburant = new Carburant();\n  }\n\n  addcarburant() {\n    this.carburantService.addCarburant(this.carburant)\n      .subscribe(\n        res => {\n          this.carburantService.getCarburantList();\n          this.dialogRef.close();\n          this.notifService.success('Carburant ajouter avec succés');\n        },\n        err => console.log(err)\n      );\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  onClear(form: NgForm): void {\n    form.reset();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvcGFyYW1ldGVycy9wcml4Q2FyYnVyYW50L3ByaXgtQ2FyYnVyYW50LWxpc3QvcHJpeC1jYXJidXJhbnQtbGlzdC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"search-div\\\">\\n  <button mat-raised-button (click)=\\\"addCarburantDialog()\\\">\\n    <mat-icon>add</mat-icon>Ajouter\\n  </button>\\n  <mat-form-field class=\\\"search-form-field\\\" floatLabel=\\\"never\\\">\\n    <input matInput placeholder=\\\"Search\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"search\\\" (keyup)=\\\"filter()\\\">\\n    <button *ngIf=\\\"search\\\" mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"clearSearch()\\\">\\n      <mat-icon>close</mat-icon>\\n    </button>\\n  </mat-form-field>\\n</div>\\n<div class=\\\"mat-elevation-z8\\\">\\n  <mat-table [dataSource]=\\\"carburantService.carburantsMatTab\\\" matSort>\\n    <ng-container matColumnDef=\\\"carburant\\\">\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Carburant</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.carburant}}</mat-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"carburant\\\">\\n      <mat-header-cell *matHeaderCellDef>Prix</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\">{{element.prix}}</mat-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"identifiantPrix\\\">\\n    <mat-header-cell *matHeaderCellDef>Identifiant prix</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\">{{element.identifiantPrix}}</mat-cell>\\n</ng-container>\\n  <ng-container matColumnDef=\\\"actions\\\">\\n      <mat-header-cell *matHeaderCellDef></mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">\\n          <button mat-icon-button color=\\\"primary\\\" (click)=\\\"updateCarburantDialog(row)\\\">\\n              <mat-icon>edit</mat-icon>\\n          </button>\\n          <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteCarburantDialog(row._id, 'carburant')\\\">\\n              <mat-icon>delete_outline</mat-icon>\\n          </button>\\n      </mat-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"loading\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n          Loading data ...\\n      </mat-footer-cell>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"noData\\\">\\n      <mat-footer-cell *matFooterCellDef colspan=\\\"6\\\">\\n          No data.\\n      </mat-footer-cell>\\n  </ng-container>\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n  <mat-footer-row *matFooterRowDef=\\\"['loading']\\\" [ngClass]=\\\"{'hide':carburantService.carburantsMatTab!=null}\\\"></mat-footer-row>\\n  <mat-footer-row *matFooterRowDef=\\\"['noData']\\\" [ngClass]=\\\"{'hide':!(carburantService.carburantsMatTab!=null && carburantService.carburantsMatTab.data.length==0)}\\\">\\n  </mat-footer-row>\\n  </mat-table>\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" [pageSize]=\\\"5\\\" showFirstLastButtons></mat-paginator>\\n</div>\\n\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSort, MatPaginator, MatDialog } from '@angular/material';\nimport { PrixCarburantService } from 'app/shared/services/prix-carburant.service';\nimport { PrixCarburantAddComponent } from './prix-carburant-add/prix-carburant-add.component';\nimport { ConfirmDeleteComponent } from '@ComShared/confirm-delete/confirm-delete.component';\nimport { Carburant } from 'app/shared/models/carburant';\n\n@Component({\n  selector: 'app-prix-carburant-list',\n  templateUrl: './prix-carburant-list.component.html',\n  styleUrls: ['./prix-carburant-list.component.css']\n})\nexport class PrixCarburantListComponent implements OnInit {\n\n  public displayedColumns: string[];\n  public search: string;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    public carburantService: PrixCarburantService,\n    private dialog: MatDialog) {\n    this.displayedColumns = ['carburant', 'prix', 'identifiantPrix', 'actions'];\n  }\n\n  ngOnInit() {\n    this.carburantService.getCarburantList(this.sort, this.paginator);\n  }\n\n  addCarburantDialog(): void {\n    this.dialog.open(PrixCarburantAddComponent, {\n      panelClass: 'full-width-dialog'\n    });\n  }\n\n  deleteCarburantDialog(id: string, msg: string): void {\n\n    this.dialog.open(ConfirmDeleteComponent, {\n      data: { id, msg }\n    });\n  }\n\n\n  filter(): void {\n    this.carburantService.carburantsMatTab.filter = this.search.trim().toLowerCase();\n  }\n\n  clearSearch(): void {\n    this.search = '';\n    this.filter();\n  }\n\n}\n","import { NgModule, Component } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ParametersComponent } from './Components/parameters/parameters.component';\nimport { RegisterComponent } from './Components/Authentification/register/register.component';\nimport { LoginComponent } from './Components/Authentification/login/login.component';\nimport { HomeComponent } from './Components/home/home.component';\nimport { AuthGuard } from './shared/Guards/auth.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo : '/login',\n    pathMatch: 'full'\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'parameters',\n    component: ParametersComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'home',\n    component: HomeComponent,\n    canActivate: [AuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<ng2-slim-loading-bar color=\\\"blue\\\"></ng2-slim-loading-bar>\\n<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/home\\\">SS</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" *ngIf=\\\"authService.loggedIn()\\\" routerLink=\\\"/parameters\\\" routerLinkActive=\\\"active\\\">Parameters</a>\\n      </li>\\n    </ul>\\n    <ul class=\\\"navbar-nav\\\">\\n        <a class=\\\"nav-link\\\" *ngIf=\\\"!authService.loggedIn()\\\" routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">Login</a>\\n        <a class=\\\"nav-link\\\" *ngIf=\\\"!authService.loggedIn()\\\" routerLink=\\\"/register\\\" routerLinkActive=\\\"active\\\">Register</a>\\n        <a class=\\\"nav-link\\\" *ngIf=\\\"authService.loggedIn()\\\" (click)=\\\"authService.logoutUser()\\\" >Logout</a>\\n    </ul>\\n  </div>\\n</nav>\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport { AuthService } from './shared/services/auth.service';\nimport { SlimLoadingBarService } from 'ng2-slim-loading-bar';\nimport {\n  NavigationCancel,\n  Event,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router\n} from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'App';\n\n  constructor(\n    public authService: AuthService,\n    private _loadingBar: SlimLoadingBarService,\n    private _router: Router) {\n    this._router.events.subscribe((event: Event) => {\n      this.navigationInterceptor(event);\n    });\n  }\n\n  private navigationInterceptor(event: Event): void {\n    if (event instanceof NavigationStart) {\n      this._loadingBar.start();\n    }\n    if (event instanceof NavigationEnd) {\n      this._loadingBar.complete();\n    }\n    if (event instanceof NavigationCancel) {\n      this._loadingBar.stop();\n    }\n    if (event instanceof NavigationError) {\n      this._loadingBar.stop();\n    }\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './Components/Authentification/login/login.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { RegisterComponent } from './Components/Authentification/register/register.component';\r\nimport { ParametersComponent } from './Components/parameters/parameters.component';\r\nimport { HomeComponent } from './Components/home/home.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from './shared/services/auth.service';\r\nimport { AuthGuard } from './shared/Guards/auth.guard';\r\nimport { TokenInterceptorService } from './shared/services/token-interceptor.service';\r\nimport { SlimLoadingBarModule } from 'ng2-slim-loading-bar';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CarteBonTypeService } from './shared/services/carte-bon-type.service';\r\nimport { CardTypeAddComponent } from '@ComCardType/card-type-add/card-type-add.component';\r\nimport { CardTypeEditComponent } from '@ComCardType/card-type-edit/card-type-edit.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MaterialModule } from './material/material.module';\r\nimport { ClientListComponent } from '@ComClient/client-list.component';\r\nimport { MoreDetailsComponent } from '@ComClient/more-details/more-details.component';\r\nimport { AddClientComponent } from '@ComClient/add-client/add-client.component';\r\nimport { ConfirmDeleteComponent } from '@ComShared/confirm-delete/confirm-delete.component';\r\nimport { UpdateClientComponent } from '@ComClient/update-client/update-client.component';\r\nimport { CardTypeListComponent } from '@ComCardType/card-type-list.component';\r\nimport { AddCiterneComponent } from '@ComCiterne/add-citerne/add-citerne.component';\r\nimport { CiterneListComponent } from '@ComCiterne/citerne-list.component';\r\nimport { UpdateCiterneComponent } from '@ComCiterne/update-citerne/update-citerne.component';\r\nimport { ReleveIndexListComponent } from '@ComReleveIndex/releveIndex-list.component';\r\nimport { ReleveIndexAddComponent } from '@ComReleveIndex/releveIndex-add/releveIndex-add.component';\r\nimport { ReleveIndexEditComponent } from '@ComReleveIndex/releveIndex-edit/releveIndex-edit.component';\r\nimport { IndexListComponent } from '@ComIndex/index-list.component';\r\nimport { IndexAddComponent } from '@ComIndex/index-add/index-add.component';\r\nimport { IndexEditComponent } from '@ComIndex/index-edit/index-edit.component';\r\nimport { DistributeurListComponent } from '@ComDistributeur/distributeur-list.component';\r\nimport { DistributeurAddComponent } from '@ComDistributeur/distributeur-add/distributeur-add.component';\r\nimport { DistributeurEditComponent } from '@ComDistributeur/distributeur-edit/distributeur-edit.component';\r\nimport { PrixCarburantListComponent } from '@ComCarburant/prix-carburant-list.component';\r\nimport { PrixCarburantAddComponent } from '@ComCarburant/prix-carburant-add/prix-carburant-add.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    ParametersComponent,\r\n    HomeComponent,\r\n    CardTypeAddComponent,\r\n    CardTypeEditComponent,\r\n    ClientListComponent,\r\n    MoreDetailsComponent,\r\n    AddClientComponent,\r\n    ConfirmDeleteComponent,\r\n    UpdateClientComponent,\r\n    CardTypeListComponent,\r\n    AddCiterneComponent,\r\n    CiterneListComponent,\r\n    UpdateCiterneComponent,\r\n    ReleveIndexListComponent,\r\n    ReleveIndexAddComponent,\r\n    ReleveIndexEditComponent,\r\n    IndexListComponent,\r\n    IndexAddComponent,\r\n    IndexEditComponent,\r\n    DistributeurListComponent,\r\n    DistributeurAddComponent,\r\n    DistributeurEditComponent,\r\n    PrixCarburantListComponent,\r\n    PrixCarburantAddComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    CommonModule,\r\n    SlimLoadingBarModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule\r\n  ],\r\n  entryComponents: [\r\n    CardTypeAddComponent,\r\n    CardTypeEditComponent,\r\n    MoreDetailsComponent,\r\n    AddClientComponent,\r\n    ConfirmDeleteComponent,\r\n    UpdateClientComponent,\r\n    AddCiterneComponent,\r\n    UpdateCiterneComponent,\r\n    ReleveIndexAddComponent,\r\n    ReleveIndexEditComponent,\r\n    IndexAddComponent,\r\n    IndexEditComponent,\r\n    DistributeurAddComponent,\r\n    DistributeurEditComponent,\r\n    PrixCarburantAddComponent\r\n  ],\r\n  providers: [AuthService, AuthGuard,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptorService,\r\n      multi: true\r\n    }, CarteBonTypeService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport * as Material from '@angular/material';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    Material.MatButtonModule,\r\n    Material.MatCheckboxModule,\r\n    Material.MatTableModule,\r\n    Material.MatIconModule,\r\n    Material.MatPaginatorModule,\r\n    Material.MatSortModule,\r\n    Material.MatFormFieldModule,\r\n    Material.MatInputModule,\r\n    Material.MatDialogModule,\r\n    Material.MatToolbarModule,\r\n    Material.MatGridListModule,\r\n    Material.MatSnackBarModule,\r\n    Material.MatDividerModule,\r\n    Material.MatListModule,\r\n    Material.MatSelectModule,\r\n    Material.MatTooltipModule\r\n  ],\r\n  exports: [\r\n    Material.MatButtonModule,\r\n    Material.MatCheckboxModule,\r\n    Material.MatTableModule,\r\n    Material.MatIconModule,\r\n    Material.MatPaginatorModule,\r\n    Material.MatSortModule,\r\n    Material.MatFormFieldModule,\r\n    Material.MatInputModule,\r\n    Material.MatDialogModule,\r\n    Material.MatToolbarModule,\r\n    Material.MatGridListModule,\r\n    Material.MatSnackBarModule,\r\n    Material.MatDividerModule,\r\n    Material.MatListModule,\r\n    Material.MatSelectModule,\r\n    Material.MatTooltipModule\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router) {\n\n  }\n\n  canActivate(): boolean {\n    if (this.authService.loggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n}\n","export class Index {\r\n  constructor() {\r\n    this.reference = '';\r\n    this.valeurIndex = 0;\r\n    this.carburant = '';\r\n    this.citerne = '';\r\n    this.distributeur = '';\r\n  }\r\n  public _id?: string;\r\n  public reference: string;\r\n  public valeurIndex: number;\r\n  public dernierDate: string;\r\n  public carburant: string;\r\n  public citerne: string;\r\n  public distributeur: string;\r\n}\r\n","export class ReleveIndex {\r\n  constructor() {\r\n    this.reference = '';\r\n    this.depart = 0;\r\n    this.arrive = 0;\r\n    this.quantite = 0;\r\n    this.prix = 0.0;\r\n\r\n  }\r\n  public _id?: string;\r\n  public reference: string;\r\n  public depart: number;\r\n  public arrive: number;\r\n  public quantite: number;\r\n  public prix: number;\r\n}\r\n","export class Carburant {\r\n\r\n  constructor() {\r\n    this.carburant = '';\r\n    this.prix = 0;\r\n    this.identifiantPrix = '';\r\n  }\r\n\r\n  public _id?: string;\r\n  public carburant: string;\r\n  public prix: number;\r\n  public identifiantPrix: string;\r\n}\r\n","export class CardType {\r\n\r\n  constructor() {\r\n    this.cardCode = '';\r\n    this.cardDescription = '';\r\n  }\r\n\r\n  public _id?: string;\r\n  public cardCode: string;\r\n  public cardDescription: string;\r\n}\r\n","export class Citerne {\r\n  constructor() {\r\n    this.identifiant = '';\r\n    this.capacite = 0;\r\n    this.contenu = 0;\r\n    this.type = '';\r\n\r\n  }\r\n  public _id?: string;\r\n  public identifiant: string;\r\n  public capacite: number;\r\n  public contenu: number;\r\n  public type: string;\r\n\r\n}\r\n","export class Client {\r\n    constructor() {\r\n        this.name = '';\r\n        this.email = '';\r\n        this.type = '';\r\n        this.state = 'actif';\r\n        this.matFisc = '';\r\n        this.phone = null;\r\n        this.plafondCredit = null;\r\n        this.address = {\r\n            city: '',\r\n            postal: null\r\n        };\r\n        this.fax = null;\r\n        this.region = '';\r\n    }\r\n    public _id?: string;\r\n    public name: string;\r\n    public email: string;\r\n    public type: string;\r\n    public state: string;\r\n    public matFisc: string;\r\n    public phone: number;\r\n    public plafondCredit: number;\r\n    public address: {\r\n        city: string,\r\n        postal: number\r\n    };\r\n    public fax: number;\r\n    public region: string;\r\n}\r\n","export class Distributeur {\r\n  constructor() {\r\n    this.reference = '';\r\n    this.libelle = '';\r\n    this.numImmatriculation = 0;\r\n    this.anneeFabrication = 0;\r\n  }\r\n  public _id?: string;\r\n  public reference: string;\r\n  public libelle: string;\r\n  public numImmatriculation: number;\r\n  public anneeFabrication: number;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private registredUrl = 'https://ppp-ss.herokuapp.com/api/register';\n  private loginUrl = 'https://ppp-ss.herokuapp.com/api/login';\n  constructor(private http: HttpClient, private router: Router) { }\n\n  registerUser(user) {\n    return this.http.post<any>(this.registredUrl, user);\n  }\n\n  loginUser(user) {\n    return this.http.post<any>(this.loginUrl, user);\n  }\n\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  logoutUser() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSort, MatPaginator, MatTableDataSource } from '@angular/material';\nimport { CardType } from '../models/cardType.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarteBonTypeService {\n\n  public cardTypes: CardType[];\n  public cardTypesMatTab: MatTableDataSource<any>;\n\n  private uri = 'https://ppp-ss.herokuapp.com/cardType';\n\n  constructor(private http: HttpClient) {\n    this.cardTypes = [];\n    this.cardTypesMatTab = new MatTableDataSource(this.cardTypes);\n   }\n\n  addCardType(cardType) {\n    return this.http.post<any>(`${this.uri}/add`, cardType);\n  }\n\n  getCardTypesList(sort?: MatSort, paginator?: MatPaginator): void {\n    this.http.get<CardType[]>(`${this.uri}/list`).subscribe((data: { cardCode: '', cardDescription: '' }[]) => {\n      this.cardTypes = data;\n      this.cardTypes = this.cardTypes.reverse();\n      this.cardTypesMatTab.data = this.cardTypes;\n      if (sort) {\n        this.cardTypesMatTab.sort = sort;\n      }\n      if (paginator) {\n        this.cardTypesMatTab.paginator = paginator;\n      }\n\n\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n  editCardType(id) {\n    return this.http.get(`${this.uri}/edit/${id}`);\n  }\n\n  updateCardType(id, cardType) {\n    return this.http.put(`${this.uri}/update/${id}`, cardType);\n  }\n\n  deleteCardType(id) {\n    return this.http.delete(`${this.uri}/delete/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Citerne } from '../models/citerne.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CiterneService {\r\n\r\n  public citernes: Citerne[];\r\n  public citernesMatTab: MatTableDataSource<any>;\r\n\r\n  private uri = 'https://ppp-ss.herokuapp.com/citerne';\r\n\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.citernes = [];\r\n    this.citernesMatTab = new MatTableDataSource(this.citernes);\r\n  }\r\n\r\n  // get citernes list\r\n  getCiternesList(sort?: MatSort, paginator?: MatPaginator): void {\r\n    this.http.get<Citerne[]>(`${this.uri}/list`).subscribe(res => {\r\n      const key = 'citernes';\r\n      this.citernes = res[key];\r\n      this.citernes = this.citernes.reverse();\r\n      this.citernesMatTab.data = this.citernes;\r\n      if (sort) {\r\n        this.citernesMatTab.sort = sort;\r\n      }\r\n      if (paginator) {\r\n        this.citernesMatTab.paginator = paginator;\r\n      }\r\n\r\n\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n\r\n  // add new citerne\r\n  addCiterne(citerne: Citerne): Observable<any> {\r\n    const request = { citerne };\r\n    return this.http.post(`${this.uri}/add`, request);\r\n  }\r\n\r\n  // delete Citerne\r\n  deleteCiterne(id: string): Observable<any> {\r\n\r\n    return this.http.delete(`${this.uri}/delete/${id}`);\r\n  }\r\n\r\n  // update Citerne\r\n  updateCiterne(id: string, citerne: Citerne): Observable<any> {\r\n    const request = {\r\n      citerne\r\n    };\r\n\r\n    return this.http.put(`${this.uri}/update/${id}`, request);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Client } from '../models/client.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClientService {\r\n\r\n  public clients: Client[];\r\n  public clientsMatTab: MatTableDataSource<any>;\r\n\r\n  private uri = 'https://ppp-ss.herokuapp.com/client';\r\n\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.clients = [];\r\n    this.clientsMatTab = new MatTableDataSource(this.clients);\r\n  }\r\n\r\n  // get clients list\r\n  getClientsList(sort?: MatSort, paginator?: MatPaginator): void {\r\n    this.http.get<Client[]>(`${this.uri}/list`).subscribe(res => {\r\n      const key = 'clients';\r\n      this.clients = res[key];\r\n      this.clients = this.clients.reverse();\r\n      this.clientsMatTab.data = this.clients;\r\n      if (sort) {\r\n        this.clientsMatTab.sort = sort;\r\n      }\r\n      if (paginator) {\r\n        this.clientsMatTab.paginator = paginator;\r\n      }\r\n\r\n\r\n    },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  // add new client\r\n  addClient(client: Client): Observable<any> {\r\n    const request = { client };\r\n    return this.http.post(`${this.uri}/add`, request);\r\n  }\r\n\r\n  // delete Client\r\n  deleteClient(id: string): Observable<any> {\r\n\r\n    return this.http.delete(`${this.uri}/delete/${id}`);\r\n  }\r\n\r\n  // update Client\r\n  updateClient(id: string, client: Client): Observable<any> {\r\n    const request = {\r\n      client\r\n    };\r\n\r\n    return this.http.put(`${this.uri}/update/${id}`, request);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Distributeur } from '../models/distributeur.model';\nimport { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DistributeurService {\n\n  public distributeurs: Distributeur[];\n  public distributeursMatTab: MatTableDataSource<any>;\n\n  private uri = 'http://localhost:5000/distributeur';\n\n  constructor(private http: HttpClient) {\n    this.distributeurs = [];\n    this.distributeursMatTab = new MatTableDataSource(this.distributeurs);\n   }\n\n  addDistributeur(distributeur) {\n    return this.http.post<any>(`${this.uri}/add`, distributeur);\n  }\n\n  getDistributeursList(sort?: MatSort, paginator?: MatPaginator): void {\n    this.http.get<Distributeur[]>(`${this.uri}/list`).subscribe((data: Distributeur[]) => {\n      this.distributeurs = data;\n      this.distributeurs = this.distributeurs.reverse();\n      this.distributeursMatTab.data = this.distributeurs;\n      if (sort) {\n        this.distributeursMatTab.sort = sort;\n      }\n      if (paginator) {\n        this.distributeursMatTab.paginator = paginator;\n      }\n\n\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n  editDistributeur(id) {\n    return this.http.get(`${this.uri}/edit/${id}`);\n  }\n\n  updateDistributeur(id, distributeur) {\n    return this.http.put(`${this.uri}/update/${id}`, distributeur);\n  }\n\n  deleteDistributeur(id) {\n    return this.http.delete(`${this.uri}/delete/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Index } from '../models/Index.model';\nimport { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexService {\n\n  public indexs: Index[];\n  public indexsMatTab: MatTableDataSource<any>;\n\n\n  private uri = 'https://ppp-ss.herokuapp.com/index';\n\n  constructor(private http: HttpClient) {\n    this.indexs = [];\n    this.indexsMatTab = new MatTableDataSource(this.indexs);\n  }\n\n  addIndex(index) {\n    return this.http.post<any>(`${this.uri}/add`, index);\n  }\n\n  getIndexList(sort?: MatSort, paginator?: MatPaginator): void {\n    this.http.get<Index[]>(`${this.uri}/list`).subscribe((data: Index[]) => {\n      this.indexs = data;\n      this.indexs = this.indexs.reverse();\n      this.indexsMatTab.data = this.indexs;\n      if (sort) {\n        this.indexsMatTab.sort = sort;\n      }\n      if (paginator) {\n        this.indexsMatTab.paginator = paginator;\n      }\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n  editIndex(id) {\n    return this.http.get(`${this.uri}/edit/${id}`);\n  }\n\n  updateIndex(id, index) {\n    return this.http.put(`${this.uri}/update/${id}`, index);\n  }\n\n  deleteIndex(id) {\n    return this.http.delete(`${this.uri}/delete/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(public snackBar: MatSnackBar) { }\n\n  panel = 'panelClass';\n\n  config: MatSnackBarConfig = {\n    duration: 1500,\n    horizontalPosition: 'right',\n    verticalPosition: 'top'\n  };\n\n  success(msg) {\n    this.config[this.panel] = ['notification', 'success'];\n    this.snackBar.open(msg, '', this.config);\n  }\n\n  warn(msg) {\n    this.config[this.panel] = ['notification', 'warn'];\n    this.snackBar.open(msg, '', this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Carburant } from '../models/carburant';\nimport { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrixCarburantService {\n\n  public carburants: Carburant[];\n  public carburantsMatTab: MatTableDataSource<any>;\n\n  private uri = 'http://localhost:5000/carburant';\n\n  constructor(private http: HttpClient) {\n    this.carburants = [];\n    this.carburantsMatTab = new MatTableDataSource(this.carburants);\n   }\n\n  addCarburant(carburant) {\n    return this.http.post<any>(`${this.uri}/add`, carburant);\n  }\n\n  getCarburantList(sort?: MatSort, paginator?: MatPaginator): void {\n    this.http.get<Carburant[]>(`${this.uri}/list`).subscribe((data: Carburant[]) => {\n      this.carburants = data;\n      this.carburants = this.carburants.reverse();\n      this.carburantsMatTab.data = this.carburants;\n      if (sort) {\n        this.carburantsMatTab.sort = sort;\n      }\n      if (paginator) {\n        this.carburantsMatTab.paginator = paginator;\n      }\n\n\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n  editCarburant(id) {\n    return this.http.get(`${this.uri}/edit/${id}`);\n  }\n\n  updateCarburant(id, carburant) {\n    return this.http.put(`${this.uri}/update/${id}`, carburant);\n  }\n\n  deleteCarburant(id) {\n    return this.http.delete(`${this.uri}/delete/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\nimport { IndexVM } from '../models/view_models/IndexVM.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Index } from '../models/Index.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReleveIndexService {\n\n  public releveIndexs: IndexVM[];\n  public releveIndexsMatTab: MatTableDataSource<any>;\n  public list: string[];\n  public indexs: Index[];\n\n  private uri = 'https://ppp-ss.herokuapp.com/recette';\n  private indexUri = 'https://ppp-ss.herokuapp.com/index';\n\n  constructor(private http: HttpClient) {\n    this.releveIndexs = [];\n    this.list = [];\n    this.indexs = [];\n    this.releveIndexsMatTab = new MatTableDataSource(this.releveIndexs);\n  }\n\n  addReleveIndex(releveIndex) {\n    return this.http.post<any>(`${this.uri}/addReleveIndex`, releveIndex);\n  }\n\n  getReleveIndexsList(sort?: MatSort, paginator?: MatPaginator): void {\n    this.http.get<IndexVM[]>(`${this.uri}/listReleveIndex`).subscribe((data: IndexVM[]) => {\n      this.releveIndexs = data;\n      this.releveIndexs = this.releveIndexs.reverse();\n      this.releveIndexsMatTab.data = this.releveIndexs;\n      if (sort) {\n        this.releveIndexsMatTab.sort = sort;\n      }\n      if (paginator) {\n        this.releveIndexsMatTab.paginator = paginator;\n      }\n\n\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n  getIndexsNames(): void {\n    this.http.get<Index[]>(`${this.indexUri}/list`).subscribe((data: Index[]) => {\n      this.indexs = data;\n      let i;\n      for (i = 0; i < this.indexs.length; i++) {\n        this.list.push(this.indexs[i].reference);\n      }\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n  editReleveIndex(id) {\n    return this.http.get(`${this.uri}/editReleveIndex/${id}`);\n  }\n\n  updateReleveIndex(id, index) {\n    return this.http.put(`${this.uri}/updateReleveIndex/${id}`, index);\n  }\n\n  deleteReleveIndex(id) {\n    return this.http.delete(`${this.uri}/deleteReleveIndex/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Session } from 'app/shared/models/session.model';\nimport { MatTableDataSource } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  private uri = 'https://ppp-ss.herokuapp.com/session';\n  public sessions: Session[];\n  public sessionMatTab: MatTableDataSource<any>;\n\n  constructor(private http: HttpClient) {\n    this.sessions = [];\n    this.sessionMatTab = new MatTableDataSource(this.sessions);\n  }\n\n  getCurrentSession(): void {\n    this.http.get<Session[]>(`${this.uri}/get`).subscribe(res => {\n      const key = 'result';\n      this.sessions = res[key];\n      this.sessionMatTab.data = this.sessions;\n    },\n      err => {\n        console.log(err);\n      });\n  }\n\n\n\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(private injector: Injector) { }\n\n  intercept(req, next) {\n    const authService = this.injector.get(AuthService);\n    const tokenizedReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${authService.getToken()}`\n      }\n    });\n    return next.handle(tokenizedReq);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport 'hammerjs';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}